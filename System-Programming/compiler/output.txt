1-11	MC
14	PREP   	#include <stdio.h>
15	PREP   	#include <stdlib.h>
16	PREP   	#include <stdbool.h>
17	PREP   	#include <ctype.h>
18	PREP   	#include <string.h>
20	PREP   	#define DEFAULT_INPUT_FILENAME "scanner.c"
21	PREP   	#define DEFAULT_OUTPUT_FILENAME "output.txt"
22	PREP   	#define REWD_MAX_LEN 10
23	REWD   	const
23	REWD   	char
23	IDEN   	rewds
23	OPER   	[
23	OPER   	]
23	OPER   	[
23	IDEN   	REWD_MAX_LEN
23	OPER   	]
23	OPER   	=
23	SPEC   	{
23	SC     	
24	STR    	if
24	OPER   	,
24	STR    	do
24	OPER   	,
24	STR    	for
24	OPER   	,
24	STR    	int
24	OPER   	,
24	STR    	break
24	OPER   	,
24	STR    	default
24	OPER   	,
24	STR    	float
24	OPER   	,
25	STR    	double
25	OPER   	,
25	STR    	case
25	OPER   	,
25	STR    	else
25	OPER   	,
25	STR    	extern
25	OPER   	,
25	STR    	sizeof
25	OPER   	,
25	STR    	register
25	OPER   	,
26	STR    	while
26	OPER   	,
26	STR    	enum
26	OPER   	,
26	STR    	union
26	OPER   	,
26	STR    	goto
26	OPER   	,
26	STR    	auto
26	OPER   	,
26	STR    	char
26	OPER   	,
26	STR    	const
26	OPER   	,
27	STR    	static
27	OPER   	,
27	STR    	switch
27	OPER   	,
27	STR    	continue
27	OPER   	,
27	STR    	struct
27	OPER   	,
27	STR    	return
28	SPEC   	}
28	SPEC   	;
30	IDEN   	typedef
30	REWD   	struct
31	SPEC   	{
32	IDEN   	FILE
32	OPER   	*
32	IDEN   	fin
32	SPEC   	;
33	REWD   	int
33	IDEN   	line_number
33	SPEC   	;
34	SPEC   	}
34	IDEN   	FileReader
34	SPEC   	;
36	IDEN   	typedef
36	IDEN   	void
36	SPEC   	(
36	OPER   	*
36	IDEN   	TokenScan
36	SPEC   	)
36	SPEC   	(
36	IDEN   	FileReader
36	OPER   	*
36	IDEN   	fr
36	OPER   	,
36	IDEN   	FILE
36	OPER   	*
36	IDEN   	fout
36	SPEC   	)
36	SPEC   	;
38	IDEN   	typedef
38	REWD   	enum
39	SPEC   	{
40	IDEN   	IDEN
40	OPER   	,
41	IDEN   	REWD
41	OPER   	,
42	IDEN   	INTE
42	OPER   	,
43	IDEN   	FLOT
43	OPER   	,
44	IDEN   	CHAR
44	OPER   	,
45	IDEN   	STR
45	OPER   	,
46	IDEN   	OPER
46	OPER   	,
47	IDEN   	SPEC
47	OPER   	,
48	IDEN   	SC
48	OPER   	,
49	IDEN   	MC
49	OPER   	,
50	IDEN   	PREP
51	SPEC   	}
51	IDEN   	TokenType
51	SPEC   	;
53	SC     	
54	IDEN   	void
54	OPER   	*
54	IDEN   	ScanScan
54	SPEC   	(
54	IDEN   	FileReader
54	OPER   	*
54	IDEN   	fr
54	OPER   	,
54	IDEN   	FILE
54	OPER   	*
54	IDEN   	fout
54	OPER   	,
54	IDEN   	TokenType
54	IDEN   	Opt
54	SPEC   	)
54	SPEC   	;
55	REWD   	const
55	REWD   	char
55	OPER   	*
55	IDEN   	token_type_to_string
55	SPEC   	(
55	IDEN   	TokenType
55	IDEN   	type
55	SPEC   	)
55	SPEC   	;
56	IDEN   	void
56	IDEN   	report_token
56	SPEC   	(
56	IDEN   	FileReader
56	OPER   	*
56	IDEN   	fr
56	OPER   	,
56	IDEN   	FILE
56	OPER   	*
56	IDEN   	fout
56	OPER   	,
56	IDEN   	TokenType
56	IDEN   	type
56	OPER   	,
56	REWD   	const
56	REWD   	char
56	OPER   	*
56	IDEN   	token
56	SPEC   	)
56	SPEC   	;
57	IDEN   	void
57	IDEN   	scan_identifier
57	SPEC   	(
57	IDEN   	FileReader
57	OPER   	*
57	IDEN   	fr
57	OPER   	,
57	IDEN   	FILE
57	OPER   	*
57	IDEN   	fout
57	SPEC   	)
57	SPEC   	;
58	IDEN   	bool
58	IDEN   	scan_reserved
58	SPEC   	(
58	IDEN   	FileReader
58	OPER   	*
58	IDEN   	fr
58	OPER   	,
58	IDEN   	FILE
58	OPER   	*
58	IDEN   	fout
58	OPER   	,
58	REWD   	char
58	OPER   	*
58	IDEN   	buffer
58	SPEC   	)
58	SPEC   	;
59	IDEN   	void
59	IDEN   	scan_integer
59	SPEC   	(
59	IDEN   	FileReader
59	OPER   	*
59	IDEN   	fr
59	OPER   	,
59	IDEN   	FILE
59	OPER   	*
59	IDEN   	fout
59	SPEC   	)
59	SPEC   	;
60	IDEN   	void
60	IDEN   	scan_float
60	SPEC   	(
60	IDEN   	FileReader
60	OPER   	*
60	IDEN   	fr
60	OPER   	,
60	IDEN   	FILE
60	OPER   	*
60	IDEN   	fout
60	SPEC   	)
60	SPEC   	;
61	IDEN   	void
61	IDEN   	scan_character
61	SPEC   	(
61	IDEN   	FileReader
61	OPER   	*
61	IDEN   	fr
61	OPER   	,
61	IDEN   	FILE
61	OPER   	*
61	IDEN   	fout
61	SPEC   	)
61	SPEC   	;
62	IDEN   	void
62	IDEN   	scan_string
62	SPEC   	(
62	IDEN   	FileReader
62	OPER   	*
62	IDEN   	fr
62	OPER   	,
62	IDEN   	FILE
62	OPER   	*
62	IDEN   	fout
62	SPEC   	)
62	SPEC   	;
63	IDEN   	void
63	IDEN   	scan_operator
63	SPEC   	(
63	IDEN   	FileReader
63	OPER   	*
63	IDEN   	fr
63	OPER   	,
63	IDEN   	FILE
63	OPER   	*
63	IDEN   	fout
63	SPEC   	)
63	SPEC   	;
64	IDEN   	void
64	IDEN   	scan_special
64	SPEC   	(
64	IDEN   	FileReader
64	OPER   	*
64	IDEN   	fr
64	OPER   	,
64	IDEN   	FILE
64	OPER   	*
64	IDEN   	fout
64	SPEC   	)
64	SPEC   	;
65	IDEN   	void
65	IDEN   	scan_single_comment
65	SPEC   	(
65	IDEN   	FileReader
65	OPER   	*
65	IDEN   	fr
65	OPER   	,
65	IDEN   	FILE
65	OPER   	*
65	IDEN   	fout
65	SPEC   	)
65	SPEC   	;
66	IDEN   	void
66	IDEN   	scan_multi_comment
66	SPEC   	(
66	IDEN   	FileReader
66	OPER   	*
66	IDEN   	fr
66	OPER   	,
66	IDEN   	FILE
66	OPER   	*
66	IDEN   	fout
66	SPEC   	)
66	SPEC   	;
67	IDEN   	void
67	IDEN   	scan_preprocessor
67	SPEC   	(
67	IDEN   	FileReader
67	OPER   	*
67	IDEN   	fr
67	OPER   	,
67	IDEN   	FILE
67	OPER   	*
67	IDEN   	fout
67	SPEC   	)
67	SPEC   	;
69	REWD   	int
70	IDEN   	compare
70	SPEC   	(
70	REWD   	const
70	IDEN   	void
70	OPER   	*
70	IDEN   	arg1
70	OPER   	,
70	REWD   	const
70	IDEN   	void
70	OPER   	*
70	IDEN   	arg2
70	SPEC   	)
70	SPEC   	{
71	REWD   	return
71	SPEC   	(
71	OPER   	*
71	SPEC   	(
71	REWD   	int
71	OPER   	*
71	SPEC   	)
71	IDEN   	arg1
71	OPER   	-
71	OPER   	*
71	SPEC   	(
71	REWD   	int
71	OPER   	*
71	SPEC   	)
71	IDEN   	arg2
71	SPEC   	)
71	SPEC   	;
72	SPEC   	}
74	SC     	
75	IDEN   	void
75	IDEN   	ScanToken
75	SPEC   	(
75	IDEN   	FileReader
75	OPER   	*
75	IDEN   	fr
75	OPER   	,
75	IDEN   	FILE
75	OPER   	*
75	IDEN   	fout
75	OPER   	,
75	IDEN   	TokenScan
75	IDEN   	Opt
75	SPEC   	)
76	SPEC   	{
77	REWD   	return
77	IDEN   	Opt
77	SPEC   	(
77	IDEN   	fr
77	OPER   	,
77	IDEN   	fout
77	SPEC   	)
77	SPEC   	;
78	SPEC   	}
80	REWD   	const
80	REWD   	char
80	OPER   	*
81	IDEN   	token_type_to_string
81	SPEC   	(
81	IDEN   	TokenType
81	IDEN   	type
81	SPEC   	)
82	SPEC   	{
83	REWD   	switch
83	SPEC   	(
83	IDEN   	type
83	SPEC   	)
84	SPEC   	{
85	REWD   	case
85	IDEN   	IDEN
85	SPEC   	:
86	REWD   	return
86	STR    	IDEN
86	SPEC   	;
87	REWD   	case
87	IDEN   	REWD
87	SPEC   	:
88	REWD   	return
88	STR    	REWD
88	SPEC   	;
89	REWD   	case
89	IDEN   	INTE
89	SPEC   	:
90	REWD   	return
90	STR    	INTE
90	SPEC   	;
91	REWD   	case
91	IDEN   	FLOT
91	SPEC   	:
92	REWD   	return
92	STR    	FLOT
92	SPEC   	;
93	REWD   	case
93	IDEN   	CHAR
93	SPEC   	:
94	REWD   	return
94	STR    	CHAR
94	SPEC   	;
95	REWD   	case
95	IDEN   	STR
95	SPEC   	:
96	REWD   	return
96	STR    	STR
96	SPEC   	;
97	REWD   	case
97	IDEN   	OPER
97	SPEC   	:
98	REWD   	return
98	STR    	OPER
98	SPEC   	;
99	REWD   	case
99	IDEN   	SPEC
99	SPEC   	:
100	REWD   	return
100	STR    	SPEC
100	SPEC   	;
101	REWD   	case
101	IDEN   	SC
101	SPEC   	:
102	REWD   	return
102	STR    	SC
102	SPEC   	;
103	REWD   	case
103	IDEN   	MC
103	SPEC   	:
104	REWD   	return
104	STR    	MC
104	SPEC   	;
105	REWD   	case
105	IDEN   	PREP
105	SPEC   	:
106	REWD   	return
106	STR    	PREP
106	SPEC   	;
107	REWD   	default
107	SPEC   	:
108	REWD   	return
108	STR    	UNKNOWN
108	SPEC   	;
109	SPEC   	}
110	SPEC   	}
112	IDEN   	void
113	IDEN   	report_token
113	SPEC   	(
113	IDEN   	FileReader
113	OPER   	*
113	IDEN   	fr
113	OPER   	,
113	IDEN   	FILE
113	OPER   	*
113	IDEN   	fout
113	OPER   	,
113	IDEN   	TokenType
113	IDEN   	type
113	OPER   	,
113	REWD   	const
113	REWD   	char
113	OPER   	*
113	IDEN   	token
113	SPEC   	)
114	SPEC   	{
115	IDEN   	fprintf
115	SPEC   	(
115	IDEN   	fout
115	OPER   	,
115	STR    	%d\t%-7s\t%s\n
115	OPER   	,
115	IDEN   	fr
115	OPER   	->
115	IDEN   	line_number
115	OPER   	,
115	IDEN   	token_type_to_string
115	SPEC   	(
115	IDEN   	type
115	SPEC   	)
115	OPER   	,
115	IDEN   	token
115	SPEC   	)
115	SPEC   	;
116	SPEC   	}
118	IDEN   	bool
119	IDEN   	scan_reserved
119	SPEC   	(
119	IDEN   	FileReader
119	OPER   	*
119	IDEN   	fr
119	OPER   	,
119	IDEN   	FILE
119	OPER   	*
119	IDEN   	fout
119	OPER   	,
119	REWD   	char
119	OPER   	*
119	IDEN   	buffer
119	SPEC   	)
120	SPEC   	{
121	REWD   	char
121	OPER   	*
121	IDEN   	ch
121	OPER   	=
121	IDEN   	bsearch
121	SPEC   	(
121	IDEN   	buffer
121	OPER   	,
121	IDEN   	rewds
121	OPER   	,
121	INTE   	25
121	OPER   	,
121	IDEN   	REWD_MAX_LEN
121	OPER   	,
121	IDEN   	compare
121	SPEC   	)
121	SPEC   	;
122	REWD   	if
122	SPEC   	(
122	IDEN   	ch
122	OPER   	!=
122	IDEN   	NULL
122	SPEC   	)
123	SPEC   	{
124	IDEN   	report_token
124	SPEC   	(
124	IDEN   	fr
124	OPER   	,
124	IDEN   	fout
124	OPER   	,
124	IDEN   	REWD
124	OPER   	,
124	IDEN   	buffer
124	SPEC   	)
124	SPEC   	;
125	REWD   	return
125	IDEN   	true
125	SPEC   	;
126	SPEC   	}
127	REWD   	else
128	SPEC   	{
129	REWD   	return
129	IDEN   	false
129	SPEC   	;
130	SPEC   	}
131	SPEC   	}
133	IDEN   	void
134	IDEN   	scan_identifier
134	SPEC   	(
134	IDEN   	FileReader
134	OPER   	*
134	IDEN   	fr
134	OPER   	,
134	IDEN   	FILE
134	OPER   	*
134	IDEN   	fout
134	SPEC   	)
135	SPEC   	{
136	REWD   	char
136	IDEN   	c
136	OPER   	=
136	IDEN   	fgetc
136	SPEC   	(
136	IDEN   	fr
136	OPER   	->
136	IDEN   	fin
136	SPEC   	)
136	SPEC   	;
137	REWD   	char
137	IDEN   	buffer
137	OPER   	[
137	INTE   	256
137	OPER   	]
137	SPEC   	;
138	REWD   	int
138	IDEN   	index
138	OPER   	=
138	INTE   	0
138	SPEC   	;
139	IDEN   	buffer
139	OPER   	[
139	IDEN   	index
139	OPER   	++
139	OPER   	]
139	OPER   	=
139	IDEN   	c
139	SPEC   	;
141	REWD   	while
141	SPEC   	(
141	SPEC   	(
141	IDEN   	c
141	OPER   	=
141	IDEN   	fgetc
141	SPEC   	(
141	IDEN   	fr
141	OPER   	->
141	IDEN   	fin
141	SPEC   	)
141	SPEC   	)
141	OPER   	!=
141	IDEN   	EOF
142	OPER   	&&
142	SPEC   	(
142	IDEN   	isalpha
142	SPEC   	(
142	IDEN   	c
142	SPEC   	)
142	OPER   	||
142	IDEN   	isdigit
142	SPEC   	(
142	IDEN   	c
142	SPEC   	)
142	OPER   	||
142	IDEN   	c
142	OPER   	==
142	CHAR   	_
142	SPEC   	)
142	SPEC   	)
143	SPEC   	{
144	IDEN   	buffer
144	OPER   	[
144	IDEN   	index
144	OPER   	++
144	OPER   	]
144	OPER   	=
144	IDEN   	c
144	SPEC   	;
145	SPEC   	}
147	IDEN   	buffer
147	OPER   	[
147	IDEN   	index
147	OPER   	]
147	OPER   	=
147	CHAR   	\\0
147	SPEC   	;
149	IDEN   	fseek
149	SPEC   	(
149	IDEN   	fr
149	OPER   	->
149	IDEN   	fin
149	OPER   	,
149	OPER   	,
149	IDEN   	SEEK_CUR
149	SPEC   	)
149	SPEC   	;
150	REWD   	if
150	SPEC   	(
150	OPER   	!
150	IDEN   	scan_reserved
150	SPEC   	(
150	IDEN   	fr
150	OPER   	,
150	IDEN   	fout
150	OPER   	,
150	IDEN   	buffer
150	SPEC   	)
150	SPEC   	)
151	SPEC   	{
152	IDEN   	report_token
152	SPEC   	(
152	IDEN   	fr
152	OPER   	,
152	IDEN   	fout
152	OPER   	,
152	IDEN   	IDEN
152	OPER   	,
152	IDEN   	buffer
152	SPEC   	)
152	SPEC   	;
153	SPEC   	}
154	SPEC   	}
156	IDEN   	void
157	IDEN   	scan_integer
157	SPEC   	(
157	IDEN   	FileReader
157	OPER   	*
157	IDEN   	fr
157	OPER   	,
157	IDEN   	FILE
157	OPER   	*
157	IDEN   	fout
157	SPEC   	)
158	SPEC   	{
159	REWD   	char
159	IDEN   	c
159	OPER   	=
159	IDEN   	fgetc
159	SPEC   	(
159	IDEN   	fr
159	OPER   	->
159	IDEN   	fin
159	SPEC   	)
159	SPEC   	;
160	REWD   	char
160	IDEN   	buffer
160	OPER   	[
160	INTE   	256
160	OPER   	]
160	SPEC   	;
161	REWD   	int
161	IDEN   	index
161	OPER   	=
161	INTE   	0
161	SPEC   	;
163	SC     	
164	REWD   	if
164	SPEC   	(
164	IDEN   	c
164	OPER   	==
164	CHAR   	+
164	OPER   	||
164	IDEN   	c
164	OPER   	==
164	CHAR   	-
164	SPEC   	)
165	SPEC   	{
166	IDEN   	buffer
166	OPER   	[
166	IDEN   	index
166	OPER   	++
166	OPER   	]
166	OPER   	=
166	IDEN   	c
166	SPEC   	;
167	IDEN   	c
167	OPER   	=
167	IDEN   	fgetc
167	SPEC   	(
167	IDEN   	fr
167	OPER   	->
167	IDEN   	fin
167	SPEC   	)
167	SPEC   	;
168	SPEC   	}
171	REWD   	int
171	IDEN   	cnt
171	OPER   	=
171	INTE   	1
171	SPEC   	;
172	SC     	
173	REWD   	while
173	SPEC   	(
173	IDEN   	isdigit
173	SPEC   	(
173	IDEN   	c
173	SPEC   	)
173	SPEC   	)
174	SPEC   	{
175	IDEN   	buffer
175	OPER   	[
175	IDEN   	index
175	OPER   	++
175	OPER   	]
175	OPER   	=
175	IDEN   	c
175	SPEC   	;
176	IDEN   	c
176	OPER   	=
176	IDEN   	fgetc
176	SPEC   	(
176	IDEN   	fr
176	OPER   	->
176	IDEN   	fin
176	SPEC   	)
176	SPEC   	;
177	IDEN   	cnt
177	OPER   	++
177	SPEC   	;
178	REWD   	if
178	SPEC   	(
178	IDEN   	c
178	OPER   	==
178	CHAR   	.
178	SPEC   	)
179	SPEC   	{
180	IDEN   	fseek
180	SPEC   	(
180	IDEN   	fr
180	OPER   	->
180	IDEN   	fin
180	OPER   	,
180	INTE   	0
180	OPER   	-
180	IDEN   	cnt
180	OPER   	,
180	IDEN   	SEEK_CUR
180	SPEC   	)
180	SPEC   	;
181	REWD   	return
181	IDEN   	scan_float
181	SPEC   	(
181	IDEN   	fr
181	OPER   	,
181	IDEN   	fout
181	SPEC   	)
181	SPEC   	;
182	SPEC   	}
183	SPEC   	}
184	IDEN   	fseek
184	SPEC   	(
184	IDEN   	fr
184	OPER   	->
184	IDEN   	fin
184	OPER   	,
184	OPER   	,
184	IDEN   	SEEK_CUR
184	SPEC   	)
184	SPEC   	;
186	SC     	
187	REWD   	if
187	SPEC   	(
187	OPER   	!
187	IDEN   	isdigit
187	SPEC   	(
187	IDEN   	buffer
187	OPER   	[
187	IDEN   	index
187	OPER   	-
187	INTE   	1
187	OPER   	]
187	SPEC   	)
187	SPEC   	)
188	SPEC   	{
189	IDEN   	fseek
189	SPEC   	(
189	IDEN   	fr
189	OPER   	->
189	IDEN   	fin
189	OPER   	,
189	OPER   	,
189	IDEN   	SEEK_CUR
189	SPEC   	)
189	SPEC   	;
190	IDEN   	index
190	OPER   	--
190	SPEC   	;
191	SPEC   	}
193	IDEN   	buffer
193	OPER   	[
193	IDEN   	index
193	OPER   	]
193	OPER   	=
193	CHAR   	\\0
193	SPEC   	;
195	SC     	
196	IDEN   	report_token
196	SPEC   	(
196	IDEN   	fr
196	OPER   	,
196	IDEN   	fout
196	OPER   	,
196	IDEN   	INTE
196	OPER   	,
196	IDEN   	buffer
196	SPEC   	)
196	SPEC   	;
197	SPEC   	}
199	IDEN   	void
200	IDEN   	scan_hexadecimal
200	SPEC   	(
200	IDEN   	FileReader
200	OPER   	*
200	IDEN   	fr
200	OPER   	,
200	IDEN   	FILE
200	OPER   	*
200	IDEN   	fout
200	SPEC   	)
201	SPEC   	{
202	REWD   	char
202	IDEN   	c
202	OPER   	=
202	IDEN   	fgetc
202	SPEC   	(
202	IDEN   	fr
202	OPER   	->
202	IDEN   	fin
202	SPEC   	)
202	SPEC   	;
203	REWD   	char
203	IDEN   	buffer
203	OPER   	[
203	INTE   	256
203	OPER   	]
203	SPEC   	;
204	REWD   	int
204	IDEN   	index
204	OPER   	=
204	INTE   	0
204	SPEC   	;
205	IDEN   	buffer
205	OPER   	[
205	IDEN   	index
205	OPER   	++
205	OPER   	]
205	OPER   	=
205	IDEN   	c
205	SPEC   	;
207	REWD   	while
207	SPEC   	(
207	SPEC   	(
207	IDEN   	c
207	OPER   	=
207	IDEN   	fgetc
207	SPEC   	(
207	IDEN   	fr
207	OPER   	->
207	IDEN   	fin
207	SPEC   	)
207	SPEC   	)
207	OPER   	!=
207	IDEN   	EOF
207	OPER   	&&
207	IDEN   	isxdigit
207	SPEC   	(
207	IDEN   	c
207	SPEC   	)
207	SPEC   	)
208	SPEC   	{
209	IDEN   	buffer
209	OPER   	[
209	IDEN   	index
209	OPER   	++
209	OPER   	]
209	OPER   	=
209	IDEN   	c
209	SPEC   	;
210	SPEC   	}
212	IDEN   	buffer
212	OPER   	[
212	IDEN   	index
212	OPER   	]
212	OPER   	=
212	CHAR   	\\0
212	SPEC   	;
214	IDEN   	fseek
214	SPEC   	(
214	IDEN   	fr
214	OPER   	->
214	IDEN   	fin
214	OPER   	,
214	OPER   	,
214	IDEN   	SEEK_CUR
214	SPEC   	)
214	SPEC   	;
215	IDEN   	report_token
215	SPEC   	(
215	IDEN   	fr
215	OPER   	,
215	IDEN   	fout
215	OPER   	,
215	IDEN   	INTE
215	OPER   	,
215	IDEN   	buffer
215	SPEC   	)
215	SPEC   	;
216	SPEC   	}
218	IDEN   	void
219	IDEN   	scan_octal
219	SPEC   	(
219	IDEN   	FileReader
219	OPER   	*
219	IDEN   	fr
219	OPER   	,
219	IDEN   	FILE
219	OPER   	*
219	IDEN   	fout
219	SPEC   	)
220	SPEC   	{
221	REWD   	char
221	IDEN   	c
221	OPER   	=
221	IDEN   	fgetc
221	SPEC   	(
221	IDEN   	fr
221	OPER   	->
221	IDEN   	fin
221	SPEC   	)
221	SPEC   	;
222	REWD   	char
222	IDEN   	buffer
222	OPER   	[
222	INTE   	256
222	OPER   	]
222	SPEC   	;
223	REWD   	int
223	IDEN   	index
223	OPER   	=
223	INTE   	0
223	SPEC   	;
224	IDEN   	buffer
224	OPER   	[
224	IDEN   	index
224	OPER   	++
224	OPER   	]
224	OPER   	=
224	IDEN   	c
224	SPEC   	;
226	REWD   	while
226	SPEC   	(
226	SPEC   	(
226	IDEN   	c
226	OPER   	=
226	IDEN   	fgetc
226	SPEC   	(
226	IDEN   	fr
226	OPER   	->
226	IDEN   	fin
226	SPEC   	)
226	SPEC   	)
226	OPER   	!=
226	IDEN   	EOF
226	OPER   	&&
226	IDEN   	c
226	OPER   	>=
226	CHAR   	0
226	OPER   	&&
226	IDEN   	c
226	OPER   	<=
226	CHAR   	7
226	SPEC   	)
227	SPEC   	{
228	IDEN   	buffer
228	OPER   	[
228	IDEN   	index
228	OPER   	++
228	OPER   	]
228	OPER   	=
228	IDEN   	c
228	SPEC   	;
229	SPEC   	}
231	IDEN   	buffer
231	OPER   	[
231	IDEN   	index
231	OPER   	]
231	OPER   	=
231	CHAR   	\\0
231	SPEC   	;
233	IDEN   	fseek
233	SPEC   	(
233	IDEN   	fr
233	OPER   	->
233	IDEN   	fin
233	OPER   	,
233	OPER   	,
233	IDEN   	SEEK_CUR
233	SPEC   	)
233	SPEC   	;
234	IDEN   	report_token
234	SPEC   	(
234	IDEN   	fr
234	OPER   	,
234	IDEN   	fout
234	OPER   	,
234	IDEN   	INTE
234	OPER   	,
234	IDEN   	buffer
234	SPEC   	)
234	SPEC   	;
235	SPEC   	}
237	IDEN   	void
238	IDEN   	scan_float
238	SPEC   	(
238	IDEN   	FileReader
238	OPER   	*
238	IDEN   	fr
238	OPER   	,
238	IDEN   	FILE
238	OPER   	*
238	IDEN   	fout
238	SPEC   	)
239	SPEC   	{
240	REWD   	char
240	IDEN   	c
240	OPER   	=
240	IDEN   	fgetc
240	SPEC   	(
240	IDEN   	fr
240	OPER   	->
240	IDEN   	fin
240	SPEC   	)
240	SPEC   	;
241	REWD   	char
241	IDEN   	buffer
241	OPER   	[
241	INTE   	256
241	OPER   	]
241	SPEC   	;
242	REWD   	int
242	IDEN   	index
242	OPER   	=
242	INTE   	0
242	SPEC   	;
244	SC     	
245	REWD   	if
245	SPEC   	(
245	IDEN   	c
245	OPER   	==
245	CHAR   	+
245	OPER   	||
245	IDEN   	c
245	OPER   	==
245	CHAR   	-
245	SPEC   	)
246	SPEC   	{
247	IDEN   	buffer
247	OPER   	[
247	IDEN   	index
247	OPER   	++
247	OPER   	]
247	OPER   	=
247	IDEN   	c
247	SPEC   	;
248	IDEN   	c
248	OPER   	=
248	IDEN   	fgetc
248	SPEC   	(
248	IDEN   	fr
248	OPER   	->
248	IDEN   	fin
248	SPEC   	)
248	SPEC   	;
249	SPEC   	}
251	SC     	
252	REWD   	while
252	SPEC   	(
252	IDEN   	isdigit
252	SPEC   	(
252	IDEN   	c
252	SPEC   	)
252	SPEC   	)
253	SPEC   	{
254	IDEN   	buffer
254	OPER   	[
254	IDEN   	index
254	OPER   	++
254	OPER   	]
254	OPER   	=
254	IDEN   	c
254	SPEC   	;
255	IDEN   	c
255	OPER   	=
255	IDEN   	fgetc
255	SPEC   	(
255	IDEN   	fr
255	OPER   	->
255	IDEN   	fin
255	SPEC   	)
255	SPEC   	;
256	SPEC   	}
258	SC     	
259	REWD   	if
259	SPEC   	(
259	IDEN   	c
259	OPER   	==
259	CHAR   	.
259	SPEC   	)
260	SPEC   	{
261	IDEN   	buffer
261	OPER   	[
261	IDEN   	index
261	OPER   	++
261	OPER   	]
261	OPER   	=
261	IDEN   	c
261	SPEC   	;
262	IDEN   	c
262	OPER   	=
262	IDEN   	fgetc
262	SPEC   	(
262	IDEN   	fr
262	OPER   	->
262	IDEN   	fin
262	SPEC   	)
262	SPEC   	;
264	SC     	
265	REWD   	while
265	SPEC   	(
265	IDEN   	isdigit
265	SPEC   	(
265	IDEN   	c
265	SPEC   	)
265	SPEC   	)
266	SPEC   	{
267	IDEN   	buffer
267	OPER   	[
267	IDEN   	index
267	OPER   	++
267	OPER   	]
267	OPER   	=
267	IDEN   	c
267	SPEC   	;
268	IDEN   	c
268	OPER   	=
268	IDEN   	fgetc
268	SPEC   	(
268	IDEN   	fr
268	OPER   	->
268	IDEN   	fin
268	SPEC   	)
268	SPEC   	;
269	SPEC   	}
270	SPEC   	}
271	REWD   	else
272	SPEC   	{
273	IDEN   	fseek
273	SPEC   	(
273	IDEN   	fr
273	OPER   	->
273	IDEN   	fin
273	OPER   	,
273	OPER   	-
273	IDEN   	index
273	OPER   	,
273	IDEN   	SEEK_CUR
273	SPEC   	)
273	SPEC   	;
274	REWD   	return
274	SPEC   	;
275	SPEC   	}
277	SC     	
278	REWD   	switch
278	SPEC   	(
278	IDEN   	c
278	SPEC   	)
279	SPEC   	{
280	REWD   	case
280	CHAR   	e
280	SPEC   	:
281	REWD   	case
281	CHAR   	E
281	SPEC   	:
282	IDEN   	buffer
282	OPER   	[
282	IDEN   	index
282	OPER   	++
282	OPER   	]
282	OPER   	=
282	IDEN   	c
282	SPEC   	;
283	IDEN   	c
283	OPER   	=
283	IDEN   	fgetc
283	SPEC   	(
283	IDEN   	fr
283	OPER   	->
283	IDEN   	fin
283	SPEC   	)
283	SPEC   	;
285	SC     	
286	REWD   	switch
286	SPEC   	(
286	IDEN   	c
286	SPEC   	)
287	SPEC   	{
288	REWD   	case
288	CHAR   	+
288	SPEC   	:
289	REWD   	case
289	CHAR   	-
289	SPEC   	:
290	IDEN   	buffer
290	OPER   	[
290	IDEN   	index
290	OPER   	++
290	OPER   	]
290	OPER   	=
290	IDEN   	c
290	SPEC   	;
291	IDEN   	c
291	OPER   	=
291	IDEN   	fgetc
291	SPEC   	(
291	IDEN   	fr
291	OPER   	->
291	IDEN   	fin
291	SPEC   	)
291	SPEC   	;
292	REWD   	if
292	SPEC   	(
292	IDEN   	isdigit
292	SPEC   	(
292	IDEN   	c
292	SPEC   	)
292	SPEC   	)
293	SPEC   	{
294	IDEN   	buffer
294	OPER   	[
294	IDEN   	index
294	OPER   	++
294	OPER   	]
294	OPER   	=
294	IDEN   	c
294	SPEC   	;
295	IDEN   	c
295	OPER   	=
295	IDEN   	fgetc
295	SPEC   	(
295	IDEN   	fr
295	OPER   	->
295	IDEN   	fin
295	SPEC   	)
295	SPEC   	;
296	SPEC   	}
297	REWD   	else
298	SPEC   	{
299	IDEN   	fseek
299	SPEC   	(
299	IDEN   	fr
299	OPER   	->
299	IDEN   	fin
299	OPER   	,
299	OPER   	,
299	IDEN   	SEEK_CUR
299	SPEC   	)
299	SPEC   	;
300	SPEC   	}
301	REWD   	break
301	SPEC   	;
302	REWD   	default
302	SPEC   	:
303	IDEN   	fseek
303	SPEC   	(
303	IDEN   	fr
303	OPER   	->
303	IDEN   	fin
303	OPER   	,
303	OPER   	,
303	IDEN   	SEEK_CUR
303	SPEC   	)
303	SPEC   	;
304	REWD   	break
304	SPEC   	;
305	SPEC   	}
306	SC     	
307	REWD   	while
307	SPEC   	(
307	IDEN   	isdigit
307	SPEC   	(
307	IDEN   	c
307	SPEC   	)
307	SPEC   	)
308	SPEC   	{
309	IDEN   	buffer
309	OPER   	[
309	IDEN   	index
309	OPER   	++
309	OPER   	]
309	OPER   	=
309	IDEN   	c
309	SPEC   	;
310	IDEN   	c
310	OPER   	=
310	IDEN   	fgetc
310	SPEC   	(
310	IDEN   	fr
310	OPER   	->
310	IDEN   	fin
310	SPEC   	)
310	SPEC   	;
311	SPEC   	}
312	REWD   	break
312	SPEC   	;
313	REWD   	default
313	SPEC   	:
314	IDEN   	fseek
314	SPEC   	(
314	IDEN   	fr
314	OPER   	->
314	IDEN   	fin
314	OPER   	,
314	OPER   	,
314	IDEN   	SEEK_CUR
314	SPEC   	)
314	SPEC   	;
315	REWD   	break
315	SPEC   	;
317	SPEC   	}
319	IDEN   	buffer
319	OPER   	[
319	IDEN   	index
319	OPER   	]
319	OPER   	=
319	CHAR   	\\0
319	SPEC   	;
321	SC     	
322	IDEN   	report_token
322	SPEC   	(
322	IDEN   	fr
322	OPER   	,
322	IDEN   	fout
322	OPER   	,
322	IDEN   	FLOT
322	OPER   	,
322	IDEN   	buffer
322	SPEC   	)
322	SPEC   	;
323	SPEC   	}
325	IDEN   	void
326	IDEN   	scan_character
326	SPEC   	(
326	IDEN   	FileReader
326	OPER   	*
326	IDEN   	fr
326	OPER   	,
326	IDEN   	FILE
326	OPER   	*
326	IDEN   	fout
326	SPEC   	)
327	SPEC   	{
328	REWD   	char
328	IDEN   	c
328	SPEC   	;
329	REWD   	char
329	IDEN   	buffer
329	OPER   	[
329	INTE   	256
329	OPER   	]
329	SPEC   	;
330	REWD   	int
330	IDEN   	index
330	OPER   	=
330	INTE   	0
330	SPEC   	;
332	REWD   	while
332	SPEC   	(
332	SPEC   	(
332	IDEN   	c
332	OPER   	=
332	IDEN   	fgetc
332	SPEC   	(
332	IDEN   	fr
332	OPER   	->
332	IDEN   	fin
332	SPEC   	)
332	SPEC   	)
332	OPER   	!=
332	IDEN   	EOF
332	OPER   	&&
332	IDEN   	c
332	OPER   	!=
332	CHAR   	\\'
332	SPEC   	)
333	SPEC   	{
334	IDEN   	buffer
334	OPER   	[
334	IDEN   	index
334	OPER   	++
334	OPER   	]
334	OPER   	=
334	IDEN   	c
334	SPEC   	;
336	SC     	
337	REWD   	if
337	SPEC   	(
337	IDEN   	c
337	OPER   	==
337	CHAR   	\\\
337	SPEC   	)
338	SPEC   	{
339	IDEN   	c
339	OPER   	=
339	IDEN   	fgetc
339	SPEC   	(
339	IDEN   	fr
339	OPER   	->
339	IDEN   	fin
339	SPEC   	)
339	SPEC   	;
340	IDEN   	buffer
340	OPER   	[
340	IDEN   	index
340	OPER   	++
340	OPER   	]
340	OPER   	=
340	CHAR   	\\\
340	SPEC   	;
341	IDEN   	buffer
341	OPER   	[
341	IDEN   	index
341	OPER   	++
341	OPER   	]
341	OPER   	=
341	IDEN   	c
341	SPEC   	;
342	SPEC   	}
343	SPEC   	}
345	REWD   	if
345	SPEC   	(
345	IDEN   	c
345	OPER   	==
345	CHAR   	\\'
345	SPEC   	)
346	SPEC   	{
347	IDEN   	buffer
347	OPER   	[
347	IDEN   	index
347	OPER   	]
347	OPER   	=
347	CHAR   	\\0
347	SPEC   	;
348	IDEN   	report_token
348	SPEC   	(
348	IDEN   	fr
348	OPER   	,
348	IDEN   	fout
348	OPER   	,
348	IDEN   	CHAR
348	OPER   	,
348	IDEN   	buffer
348	SPEC   	)
348	SPEC   	;
349	SPEC   	}
350	REWD   	else
351	SPEC   	{
352	IDEN   	fprintf
352	SPEC   	(
352	IDEN   	fout
352	OPER   	,
352	STR    	Invalid character constant at line %d\n
352	OPER   	,
352	IDEN   	fr
352	OPER   	->
352	IDEN   	line_number
352	SPEC   	)
352	SPEC   	;
353	SPEC   	}
354	SPEC   	}
356	IDEN   	void
357	IDEN   	scan_string
357	SPEC   	(
357	IDEN   	FileReader
357	OPER   	*
357	IDEN   	fr
357	OPER   	,
357	IDEN   	FILE
357	OPER   	*
357	IDEN   	fout
357	SPEC   	)
358	SPEC   	{
359	REWD   	char
359	IDEN   	c
359	SPEC   	;
360	REWD   	char
360	IDEN   	buffer
360	OPER   	[
360	INTE   	256
360	OPER   	]
360	SPEC   	;
361	REWD   	int
361	IDEN   	index
361	OPER   	=
361	INTE   	0
361	SPEC   	;
362	REWD   	int
362	IDEN   	line_start
362	OPER   	=
362	IDEN   	fr
362	OPER   	->
362	IDEN   	line_number
362	SPEC   	;
364	REWD   	while
364	SPEC   	(
364	SPEC   	(
364	IDEN   	c
364	OPER   	=
364	IDEN   	fgetc
364	SPEC   	(
364	IDEN   	fr
364	OPER   	->
364	IDEN   	fin
364	SPEC   	)
364	SPEC   	)
364	OPER   	!=
364	IDEN   	EOF
364	SPEC   	)
365	SPEC   	{
366	SC     	
367	REWD   	if
367	SPEC   	(
367	IDEN   	c
367	OPER   	==
367	CHAR   	\\\
367	SPEC   	)
368	SPEC   	{
369	IDEN   	buffer
369	OPER   	[
369	IDEN   	index
369	OPER   	++
369	OPER   	]
369	OPER   	=
369	CHAR   	\\\
369	SPEC   	;
370	IDEN   	c
370	OPER   	=
370	IDEN   	fgetc
370	SPEC   	(
370	IDEN   	fr
370	OPER   	->
370	IDEN   	fin
370	SPEC   	)
370	SPEC   	;
371	IDEN   	buffer
371	OPER   	[
371	IDEN   	index
371	OPER   	++
371	OPER   	]
371	OPER   	=
371	IDEN   	c
371	SPEC   	;
372	IDEN   	c
372	OPER   	=
372	IDEN   	fgetc
372	SPEC   	(
372	IDEN   	fr
372	OPER   	->
372	IDEN   	fin
372	SPEC   	)
372	SPEC   	;
373	SPEC   	}
375	REWD   	if
375	SPEC   	(
375	IDEN   	c
375	OPER   	==
375	CHAR   	\\"
375	SPEC   	)
376	SPEC   	{
377	IDEN   	buffer
377	OPER   	[
377	IDEN   	index
377	OPER   	]
377	OPER   	=
377	CHAR   	\\0
377	SPEC   	;
378	IDEN   	report_token
378	SPEC   	(
378	IDEN   	fr
378	OPER   	,
378	IDEN   	fout
378	OPER   	,
378	IDEN   	STR
378	OPER   	,
378	IDEN   	buffer
378	SPEC   	)
378	SPEC   	;
379	REWD   	return
379	SPEC   	;
380	SPEC   	}
381	REWD   	else
381	REWD   	if
381	SPEC   	(
381	IDEN   	c
381	OPER   	==
381	CHAR   	\\n
381	SPEC   	)
382	SPEC   	{
383	IDEN   	fprintf
383	SPEC   	(
383	IDEN   	fout
383	OPER   	,
383	STR    	%d \t STR\t%s \tERROR: missing \"\n
383	OPER   	,
383	IDEN   	line_start
383	OPER   	,
383	IDEN   	buffer
383	SPEC   	)
383	SPEC   	;
384	IDEN   	fr
384	OPER   	->
384	IDEN   	line_number
384	OPER   	++
384	SPEC   	;
385	REWD   	return
385	SPEC   	;
386	SPEC   	}
387	REWD   	else
388	SPEC   	{
389	IDEN   	buffer
389	OPER   	[
389	IDEN   	index
389	OPER   	++
389	OPER   	]
389	OPER   	=
389	IDEN   	c
389	SPEC   	;
390	SPEC   	}
391	SPEC   	}
393	IDEN   	fprintf
393	SPEC   	(
393	IDEN   	fout
393	OPER   	,
393	STR    	%d\tSTR\t\t%s  ERROR: missing \"\n
393	OPER   	,
393	IDEN   	line_start
393	OPER   	,
393	IDEN   	buffer
393	SPEC   	)
393	SPEC   	;
394	SPEC   	}
396	IDEN   	void
397	IDEN   	scan_preprocessor
397	SPEC   	(
397	IDEN   	FileReader
397	OPER   	*
397	IDEN   	fr
397	OPER   	,
397	IDEN   	FILE
397	OPER   	*
397	IDEN   	fout
397	SPEC   	)
398	SPEC   	{
399	REWD   	char
399	IDEN   	c
399	OPER   	=
399	IDEN   	fgetc
399	SPEC   	(
399	IDEN   	fr
399	OPER   	->
399	IDEN   	fin
399	SPEC   	)
399	SPEC   	;
400	REWD   	char
400	IDEN   	buffer
400	OPER   	[
400	INTE   	256
400	OPER   	]
400	SPEC   	;
401	REWD   	int
401	IDEN   	index
401	OPER   	=
401	INTE   	0
401	SPEC   	;
402	IDEN   	buffer
402	OPER   	[
402	IDEN   	index
402	OPER   	++
402	OPER   	]
402	OPER   	=
402	IDEN   	c
402	SPEC   	;
404	SC     	
405	REWD   	while
405	SPEC   	(
405	IDEN   	c
405	OPER   	!=
405	CHAR   	\\n
405	OPER   	&&
405	IDEN   	c
405	OPER   	!=
405	IDEN   	EOF
405	SPEC   	)
406	SPEC   	{
407	IDEN   	c
407	OPER   	=
407	IDEN   	fgetc
407	SPEC   	(
407	IDEN   	fr
407	OPER   	->
407	IDEN   	fin
407	SPEC   	)
407	SPEC   	;
408	IDEN   	buffer
408	OPER   	[
408	IDEN   	index
408	OPER   	++
408	OPER   	]
408	OPER   	=
408	IDEN   	c
408	SPEC   	;
409	SPEC   	}
410	IDEN   	buffer
410	OPER   	[
410	IDEN   	index
410	OPER   	-
410	INTE   	1
410	OPER   	]
410	OPER   	=
410	CHAR   	\\0
410	SPEC   	;
411	IDEN   	fr
411	OPER   	->
411	IDEN   	line_number
411	OPER   	++
411	SPEC   	;
412	IDEN   	report_token
412	SPEC   	(
412	IDEN   	fr
412	OPER   	,
412	IDEN   	fout
412	OPER   	,
412	IDEN   	PREP
412	OPER   	,
412	IDEN   	buffer
412	SPEC   	)
412	SPEC   	;
413	SPEC   	}
415	IDEN   	void
416	IDEN   	scan_operator
416	SPEC   	(
416	IDEN   	FileReader
416	OPER   	*
416	IDEN   	fr
416	OPER   	,
416	IDEN   	FILE
416	OPER   	*
416	IDEN   	fout
416	SPEC   	)
417	SPEC   	{
418	REWD   	char
418	IDEN   	c
418	OPER   	=
418	IDEN   	fgetc
418	SPEC   	(
418	IDEN   	fr
418	OPER   	->
418	IDEN   	fin
418	SPEC   	)
418	SPEC   	;
419	REWD   	char
419	IDEN   	ch
419	SPEC   	;
420	REWD   	char
420	IDEN   	buffer
420	OPER   	[
420	INTE   	3
420	OPER   	]
420	SPEC   	;
421	IDEN   	buffer
421	OPER   	[
421	INTE   	0
421	OPER   	]
421	OPER   	=
421	IDEN   	c
421	SPEC   	;
422	IDEN   	buffer
422	OPER   	[
422	INTE   	1
422	OPER   	]
422	OPER   	=
422	CHAR   	\\0
422	SPEC   	;
424	REWD   	switch
424	SPEC   	(
424	IDEN   	c
424	SPEC   	)
425	SPEC   	{
426	REWD   	case
426	CHAR   	+
426	SPEC   	:
426	SC     	
427	IDEN   	ch
427	OPER   	=
427	IDEN   	fgetc
427	SPEC   	(
427	IDEN   	fr
427	OPER   	->
427	IDEN   	fin
427	SPEC   	)
427	SPEC   	;
428	REWD   	switch
428	SPEC   	(
428	IDEN   	ch
428	SPEC   	)
429	SPEC   	{
430	REWD   	case
430	CHAR   	+
430	SPEC   	:
431	IDEN   	buffer
431	OPER   	[
431	INTE   	1
431	OPER   	]
431	OPER   	=
431	CHAR   	+
431	SPEC   	;
432	IDEN   	buffer
432	OPER   	[
432	INTE   	2
432	OPER   	]
432	OPER   	=
432	CHAR   	\\0
432	SPEC   	;
433	REWD   	break
433	SPEC   	;
434	REWD   	case
434	CHAR   	=
434	SPEC   	:
435	IDEN   	buffer
435	OPER   	[
435	INTE   	1
435	OPER   	]
435	OPER   	=
435	CHAR   	=
435	SPEC   	;
436	IDEN   	buffer
436	OPER   	[
436	INTE   	2
436	OPER   	]
436	OPER   	=
436	CHAR   	\\0
436	SPEC   	;
437	REWD   	break
437	SPEC   	;
438	REWD   	default
438	SPEC   	:
439	IDEN   	fseek
439	SPEC   	(
439	IDEN   	fr
439	OPER   	->
439	IDEN   	fin
439	OPER   	,
439	OPER   	,
439	IDEN   	SEEK_CUR
439	SPEC   	)
439	SPEC   	;
440	REWD   	break
440	SPEC   	;
441	SPEC   	}
443	REWD   	case
443	CHAR   	-
443	SPEC   	:
443	SC     	
444	IDEN   	ch
444	OPER   	=
444	IDEN   	fgetc
444	SPEC   	(
444	IDEN   	fr
444	OPER   	->
444	IDEN   	fin
444	SPEC   	)
444	SPEC   	;
445	REWD   	switch
445	SPEC   	(
445	IDEN   	ch
445	SPEC   	)
446	SPEC   	{
447	REWD   	case
447	CHAR   	-
447	SPEC   	:
448	IDEN   	buffer
448	OPER   	[
448	INTE   	1
448	OPER   	]
448	OPER   	=
448	CHAR   	-
448	SPEC   	;
449	IDEN   	buffer
449	OPER   	[
449	INTE   	2
449	OPER   	]
449	OPER   	=
449	CHAR   	\\0
449	SPEC   	;
450	REWD   	break
450	SPEC   	;
451	REWD   	case
451	CHAR   	=
451	SPEC   	:
452	IDEN   	buffer
452	OPER   	[
452	INTE   	1
452	OPER   	]
452	OPER   	=
452	CHAR   	=
452	SPEC   	;
453	IDEN   	buffer
453	OPER   	[
453	INTE   	2
453	OPER   	]
453	OPER   	=
453	CHAR   	\\0
453	SPEC   	;
454	REWD   	break
454	SPEC   	;
455	REWD   	case
455	CHAR   	>
455	SPEC   	:
456	IDEN   	buffer
456	OPER   	[
456	INTE   	1
456	OPER   	]
456	OPER   	=
456	CHAR   	>
456	SPEC   	;
457	IDEN   	buffer
457	OPER   	[
457	INTE   	2
457	OPER   	]
457	OPER   	=
457	CHAR   	\\0
457	SPEC   	;
458	REWD   	break
458	SPEC   	;
459	REWD   	default
459	SPEC   	:
460	IDEN   	fseek
460	SPEC   	(
460	IDEN   	fr
460	OPER   	->
460	IDEN   	fin
460	OPER   	,
460	OPER   	,
460	IDEN   	SEEK_CUR
460	SPEC   	)
460	SPEC   	;
461	REWD   	break
461	SPEC   	;
462	SPEC   	}
463	REWD   	case
463	CHAR   	*
463	SPEC   	:
463	SC     	
464	IDEN   	ch
464	OPER   	=
464	IDEN   	fgetc
464	SPEC   	(
464	IDEN   	fr
464	OPER   	->
464	IDEN   	fin
464	SPEC   	)
464	SPEC   	;
465	REWD   	switch
465	SPEC   	(
465	IDEN   	ch
465	SPEC   	)
466	SPEC   	{
467	REWD   	case
467	CHAR   	*
467	SPEC   	:
468	IDEN   	buffer
468	OPER   	[
468	INTE   	1
468	OPER   	]
468	OPER   	=
468	CHAR   	*
468	SPEC   	;
469	IDEN   	buffer
469	OPER   	[
469	INTE   	2
469	OPER   	]
469	OPER   	=
469	CHAR   	\\0
469	SPEC   	;
470	REWD   	break
470	SPEC   	;
471	REWD   	default
471	SPEC   	:
472	IDEN   	fseek
472	SPEC   	(
472	IDEN   	fr
472	OPER   	->
472	IDEN   	fin
472	OPER   	,
472	OPER   	,
472	IDEN   	SEEK_CUR
472	SPEC   	)
472	SPEC   	;
473	REWD   	break
473	SPEC   	;
474	SPEC   	}
475	REWD   	case
475	CHAR   	/
475	SPEC   	:
475	SC     	
476	IDEN   	ch
476	OPER   	=
476	IDEN   	fgetc
476	SPEC   	(
476	IDEN   	fr
476	OPER   	->
476	IDEN   	fin
476	SPEC   	)
476	SPEC   	;
477	REWD   	switch
477	SPEC   	(
477	IDEN   	ch
477	SPEC   	)
478	SPEC   	{
479	REWD   	case
479	CHAR   	=
479	SPEC   	:
480	IDEN   	buffer
480	OPER   	[
480	INTE   	1
480	OPER   	]
480	OPER   	=
480	CHAR   	=
480	SPEC   	;
481	IDEN   	buffer
481	OPER   	[
481	INTE   	2
481	OPER   	]
481	OPER   	=
481	CHAR   	\\0
481	SPEC   	;
482	REWD   	break
482	SPEC   	;
483	REWD   	default
483	SPEC   	:
484	IDEN   	fseek
484	SPEC   	(
484	IDEN   	fr
484	OPER   	->
484	IDEN   	fin
484	OPER   	,
484	OPER   	,
484	IDEN   	SEEK_CUR
484	SPEC   	)
484	SPEC   	;
485	REWD   	break
485	SPEC   	;
486	SPEC   	}
487	REWD   	case
487	CHAR   	%
487	SPEC   	:
487	SC     	
488	IDEN   	ch
488	OPER   	=
488	IDEN   	fgetc
488	SPEC   	(
488	IDEN   	fr
488	OPER   	->
488	IDEN   	fin
488	SPEC   	)
488	SPEC   	;
489	REWD   	switch
489	SPEC   	(
489	IDEN   	ch
489	SPEC   	)
490	SPEC   	{
491	REWD   	case
491	CHAR   	=
491	SPEC   	:
492	IDEN   	buffer
492	OPER   	[
492	INTE   	1
492	OPER   	]
492	OPER   	=
492	CHAR   	=
492	SPEC   	;
493	IDEN   	buffer
493	OPER   	[
493	INTE   	2
493	OPER   	]
493	OPER   	=
493	CHAR   	\\0
493	SPEC   	;
494	REWD   	break
494	SPEC   	;
495	REWD   	default
495	SPEC   	:
496	IDEN   	fseek
496	SPEC   	(
496	IDEN   	fr
496	OPER   	->
496	IDEN   	fin
496	OPER   	,
496	OPER   	,
496	IDEN   	SEEK_CUR
496	SPEC   	)
496	SPEC   	;
497	REWD   	break
497	SPEC   	;
498	SPEC   	}
499	REWD   	case
499	CHAR   	=
499	SPEC   	:
499	SC     	
500	IDEN   	ch
500	OPER   	=
500	IDEN   	fgetc
500	SPEC   	(
500	IDEN   	fr
500	OPER   	->
500	IDEN   	fin
500	SPEC   	)
500	SPEC   	;
501	REWD   	switch
501	SPEC   	(
501	IDEN   	ch
501	SPEC   	)
502	SPEC   	{
503	REWD   	case
503	CHAR   	=
503	SPEC   	:
504	IDEN   	buffer
504	OPER   	[
504	INTE   	1
504	OPER   	]
504	OPER   	=
504	CHAR   	=
504	SPEC   	;
505	IDEN   	buffer
505	OPER   	[
505	INTE   	2
505	OPER   	]
505	OPER   	=
505	CHAR   	\\0
505	SPEC   	;
506	REWD   	break
506	SPEC   	;
507	REWD   	default
507	SPEC   	:
508	IDEN   	fseek
508	SPEC   	(
508	IDEN   	fr
508	OPER   	->
508	IDEN   	fin
508	OPER   	,
508	OPER   	,
508	IDEN   	SEEK_CUR
508	SPEC   	)
508	SPEC   	;
509	REWD   	break
509	SPEC   	;
510	SPEC   	}
511	REWD   	case
511	CHAR   	,
511	SPEC   	:
512	REWD   	case
512	CHAR   	>
512	SPEC   	:
512	SC     	
513	IDEN   	ch
513	OPER   	=
513	IDEN   	fgetc
513	SPEC   	(
513	IDEN   	fr
513	OPER   	->
513	IDEN   	fin
513	SPEC   	)
513	SPEC   	;
514	REWD   	switch
514	SPEC   	(
514	IDEN   	ch
514	SPEC   	)
515	SPEC   	{
516	REWD   	case
516	CHAR   	>
516	SPEC   	:
517	IDEN   	buffer
517	OPER   	[
517	INTE   	1
517	OPER   	]
517	OPER   	=
517	CHAR   	>
517	SPEC   	;
518	IDEN   	buffer
518	OPER   	[
518	INTE   	2
518	OPER   	]
518	OPER   	=
518	CHAR   	\\0
518	SPEC   	;
519	REWD   	break
519	SPEC   	;
520	REWD   	case
520	CHAR   	=
520	SPEC   	:
521	IDEN   	buffer
521	OPER   	[
521	INTE   	1
521	OPER   	]
521	OPER   	=
521	CHAR   	=
521	SPEC   	;
522	IDEN   	buffer
522	OPER   	[
522	INTE   	2
522	OPER   	]
522	OPER   	=
522	CHAR   	\\0
522	SPEC   	;
523	REWD   	break
523	SPEC   	;
524	REWD   	default
524	SPEC   	:
525	IDEN   	fseek
525	SPEC   	(
525	IDEN   	fr
525	OPER   	->
525	IDEN   	fin
525	OPER   	,
525	OPER   	,
525	IDEN   	SEEK_CUR
525	SPEC   	)
525	SPEC   	;
526	REWD   	break
526	SPEC   	;
527	SPEC   	}
528	REWD   	case
528	CHAR   	<
528	SPEC   	:
528	SC     	
529	IDEN   	ch
529	OPER   	=
529	IDEN   	fgetc
529	SPEC   	(
529	IDEN   	fr
529	OPER   	->
529	IDEN   	fin
529	SPEC   	)
529	SPEC   	;
530	REWD   	switch
530	SPEC   	(
530	IDEN   	ch
530	SPEC   	)
531	SPEC   	{
532	REWD   	case
532	CHAR   	<
532	SPEC   	:
533	IDEN   	buffer
533	OPER   	[
533	INTE   	1
533	OPER   	]
533	OPER   	=
533	CHAR   	<
533	SPEC   	;
534	IDEN   	buffer
534	OPER   	[
534	INTE   	2
534	OPER   	]
534	OPER   	=
534	CHAR   	\\0
534	SPEC   	;
535	REWD   	break
535	SPEC   	;
536	REWD   	case
536	CHAR   	=
536	SPEC   	:
537	IDEN   	buffer
537	OPER   	[
537	INTE   	1
537	OPER   	]
537	OPER   	=
537	CHAR   	=
537	SPEC   	;
538	IDEN   	buffer
538	OPER   	[
538	INTE   	2
538	OPER   	]
538	OPER   	=
538	CHAR   	\\0
538	SPEC   	;
539	REWD   	break
539	SPEC   	;
540	REWD   	default
540	SPEC   	:
541	IDEN   	fseek
541	SPEC   	(
541	IDEN   	fr
541	OPER   	->
541	IDEN   	fin
541	OPER   	,
541	OPER   	,
541	IDEN   	SEEK_CUR
541	SPEC   	)
541	SPEC   	;
542	REWD   	break
542	SPEC   	;
543	SPEC   	}
544	REWD   	case
544	CHAR   	!
544	SPEC   	:
544	SC     	
545	IDEN   	ch
545	OPER   	=
545	IDEN   	fgetc
545	SPEC   	(
545	IDEN   	fr
545	OPER   	->
545	IDEN   	fin
545	SPEC   	)
545	SPEC   	;
546	REWD   	switch
546	SPEC   	(
546	IDEN   	ch
546	SPEC   	)
547	SPEC   	{
548	REWD   	case
548	CHAR   	=
548	SPEC   	:
549	IDEN   	buffer
549	OPER   	[
549	INTE   	1
549	OPER   	]
549	OPER   	=
549	CHAR   	=
549	SPEC   	;
550	IDEN   	buffer
550	OPER   	[
550	INTE   	2
550	OPER   	]
550	OPER   	=
550	CHAR   	\\0
550	SPEC   	;
551	REWD   	break
551	SPEC   	;
552	REWD   	default
552	SPEC   	:
553	IDEN   	fseek
553	SPEC   	(
553	IDEN   	fr
553	OPER   	->
553	IDEN   	fin
553	OPER   	,
553	OPER   	,
553	IDEN   	SEEK_CUR
553	SPEC   	)
553	SPEC   	;
554	REWD   	break
554	SPEC   	;
555	SPEC   	}
556	REWD   	case
556	CHAR   	&
556	SPEC   	:
556	SC     	
557	IDEN   	ch
557	OPER   	=
557	IDEN   	fgetc
557	SPEC   	(
557	IDEN   	fr
557	OPER   	->
557	IDEN   	fin
557	SPEC   	)
557	SPEC   	;
558	REWD   	switch
558	SPEC   	(
558	IDEN   	ch
558	SPEC   	)
559	SPEC   	{
560	REWD   	case
560	CHAR   	&
560	SPEC   	:
561	IDEN   	buffer
561	OPER   	[
561	INTE   	1
561	OPER   	]
561	OPER   	=
561	CHAR   	&
561	SPEC   	;
562	IDEN   	buffer
562	OPER   	[
562	INTE   	2
562	OPER   	]
562	OPER   	=
562	CHAR   	\\0
562	SPEC   	;
563	REWD   	break
563	SPEC   	;
564	REWD   	default
564	SPEC   	:
565	IDEN   	fseek
565	SPEC   	(
565	IDEN   	fr
565	OPER   	->
565	IDEN   	fin
565	OPER   	,
565	OPER   	,
565	IDEN   	SEEK_CUR
565	SPEC   	)
565	SPEC   	;
566	REWD   	break
566	SPEC   	;
567	SPEC   	}
568	REWD   	case
568	CHAR   	|
568	SPEC   	:
568	SC     	
569	IDEN   	ch
569	OPER   	=
569	IDEN   	fgetc
569	SPEC   	(
569	IDEN   	fr
569	OPER   	->
569	IDEN   	fin
569	SPEC   	)
569	SPEC   	;
570	REWD   	switch
570	SPEC   	(
570	IDEN   	ch
570	SPEC   	)
571	SPEC   	{
572	REWD   	case
572	CHAR   	|
572	SPEC   	:
573	IDEN   	buffer
573	OPER   	[
573	INTE   	1
573	OPER   	]
573	OPER   	=
573	CHAR   	|
573	SPEC   	;
574	IDEN   	buffer
574	OPER   	[
574	INTE   	2
574	OPER   	]
574	OPER   	=
574	CHAR   	\\0
574	SPEC   	;
575	REWD   	break
575	SPEC   	;
576	REWD   	break
576	SPEC   	;
577	REWD   	default
577	SPEC   	:
578	IDEN   	fseek
578	SPEC   	(
578	IDEN   	fr
578	OPER   	->
578	IDEN   	fin
578	OPER   	,
578	OPER   	,
578	IDEN   	SEEK_CUR
578	SPEC   	)
578	SPEC   	;
579	REWD   	break
579	SPEC   	;
580	SPEC   	}
581	REWD   	case
581	CHAR   	^
581	SPEC   	:
582	REWD   	case
582	CHAR   	[
582	SPEC   	:
583	REWD   	case
583	CHAR   	]
583	SPEC   	:
584	REWD   	case
584	CHAR   	.
584	SPEC   	:
585	IDEN   	report_token
585	SPEC   	(
585	IDEN   	fr
585	OPER   	,
585	IDEN   	fout
585	OPER   	,
585	IDEN   	OPER
585	OPER   	,
585	IDEN   	buffer
585	SPEC   	)
585	SPEC   	;
586	REWD   	break
586	SPEC   	;
587	REWD   	case
587	CHAR   	(
587	SPEC   	:
588	REWD   	case
588	CHAR   	)
588	SPEC   	:
589	REWD   	case
589	CHAR   	{
589	SPEC   	:
590	REWD   	case
590	CHAR   	}
590	SPEC   	:
591	REWD   	case
591	CHAR   	;
591	SPEC   	:
592	REWD   	case
592	CHAR   	?
592	SPEC   	:
593	REWD   	case
593	CHAR   	:
593	SPEC   	:
594	IDEN   	report_token
594	SPEC   	(
594	IDEN   	fr
594	OPER   	,
594	IDEN   	fout
594	OPER   	,
594	IDEN   	SPEC
594	OPER   	,
594	IDEN   	buffer
594	SPEC   	)
594	SPEC   	;
595	REWD   	break
595	SPEC   	;
596	REWD   	default
596	SPEC   	:
597	IDEN   	fprintf
597	SPEC   	(
597	IDEN   	fout
597	OPER   	,
597	STR    	Invalid operator at line %d\n
597	OPER   	,
597	IDEN   	fr
597	OPER   	->
597	IDEN   	line_number
597	SPEC   	)
597	SPEC   	;
598	SPEC   	}
599	SPEC   	}
601	IDEN   	void
602	IDEN   	scan_single_comment
602	SPEC   	(
602	IDEN   	FileReader
602	OPER   	*
602	IDEN   	fr
602	OPER   	,
602	IDEN   	FILE
602	OPER   	*
602	IDEN   	fout
602	SPEC   	)
603	SPEC   	{
604	REWD   	char
604	IDEN   	c
604	SPEC   	;
606	REWD   	while
606	SPEC   	(
606	SPEC   	(
606	IDEN   	c
606	OPER   	=
606	IDEN   	fgetc
606	SPEC   	(
606	IDEN   	fr
606	OPER   	->
606	IDEN   	fin
606	SPEC   	)
606	SPEC   	)
606	OPER   	!=
606	IDEN   	EOF
606	OPER   	&&
606	IDEN   	c
606	OPER   	!=
606	CHAR   	\\n
606	SPEC   	)
607	SPEC   	{
608	SC     	
609	SPEC   	}
610	IDEN   	report_token
610	SPEC   	(
610	IDEN   	fr
610	OPER   	,
610	IDEN   	fout
610	OPER   	,
610	IDEN   	SC
610	OPER   	,
610	STR    	
610	SPEC   	)
610	SPEC   	;
611	IDEN   	fr
611	OPER   	->
611	IDEN   	line_number
611	OPER   	++
611	SPEC   	;
612	SPEC   	}
614	IDEN   	void
615	IDEN   	scan_multi_comment
615	SPEC   	(
615	IDEN   	FileReader
615	OPER   	*
615	IDEN   	fr
615	OPER   	,
615	IDEN   	FILE
615	OPER   	*
615	IDEN   	fout
615	SPEC   	)
616	SPEC   	{
617	REWD   	char
617	IDEN   	c
617	SPEC   	;
618	REWD   	int
618	IDEN   	comment_start_line
618	OPER   	=
618	IDEN   	fr
618	OPER   	->
618	IDEN   	line_number
618	SPEC   	;
619	REWD   	while
619	SPEC   	(
619	SPEC   	(
619	IDEN   	c
619	OPER   	=
619	IDEN   	fgetc
619	SPEC   	(
619	IDEN   	fr
619	OPER   	->
619	IDEN   	fin
619	SPEC   	)
619	SPEC   	)
619	OPER   	!=
619	IDEN   	EOF
619	SPEC   	)
620	SPEC   	{
621	REWD   	if
621	SPEC   	(
621	IDEN   	c
621	OPER   	==
621	CHAR   	*
621	SPEC   	)
622	SPEC   	{
623	REWD   	if
623	SPEC   	(
623	SPEC   	(
623	IDEN   	c
623	OPER   	=
623	IDEN   	fgetc
623	SPEC   	(
623	IDEN   	fr
623	OPER   	->
623	IDEN   	fin
623	SPEC   	)
623	SPEC   	)
623	OPER   	==
623	CHAR   	/
623	SPEC   	)
624	SPEC   	{
625	IDEN   	fprintf
625	SPEC   	(
625	IDEN   	fout
625	OPER   	,
625	STR    	%d-%d\t%s\n
625	OPER   	,
626	IDEN   	comment_start_line
626	OPER   	,
627	IDEN   	fr
627	OPER   	->
627	IDEN   	line_number
627	OPER   	,
628	IDEN   	token_type_to_string
628	SPEC   	(
628	IDEN   	MC
628	SPEC   	)
628	SPEC   	)
628	SPEC   	;
629	REWD   	return
629	SPEC   	;
630	SPEC   	}
631	REWD   	else
632	SPEC   	{
633	IDEN   	fseek
633	SPEC   	(
633	IDEN   	fr
633	OPER   	->
633	IDEN   	fin
633	OPER   	,
633	OPER   	,
633	IDEN   	SEEK_CUR
633	SPEC   	)
633	SPEC   	;
634	SPEC   	}
635	SPEC   	}
636	REWD   	else
636	REWD   	if
636	SPEC   	(
636	IDEN   	c
636	OPER   	==
636	CHAR   	\\n
636	SPEC   	)
637	SPEC   	{
638	IDEN   	fr
638	OPER   	->
638	IDEN   	line_number
638	OPER   	++
638	SPEC   	;
639	SPEC   	}
641	SPEC   	}
642	IDEN   	fprintf
642	SPEC   	(
642	IDEN   	fout
642	OPER   	,
642	STR    	%d-%d\t%s\t\tERROR: missing */\n
642	OPER   	,
642	IDEN   	comment_start_line
642	OPER   	,
642	IDEN   	fr
642	OPER   	->
642	IDEN   	line_number
642	OPER   	,
642	IDEN   	token_type_to_string
642	SPEC   	(
642	IDEN   	MC
642	SPEC   	)
642	SPEC   	)
642	SPEC   	;
643	SPEC   	}
645	IDEN   	void
646	IDEN   	scan_tokens
646	SPEC   	(
646	IDEN   	FileReader
646	OPER   	*
646	IDEN   	fr
646	OPER   	,
646	IDEN   	FILE
646	OPER   	*
646	IDEN   	fout
646	SPEC   	)
647	SPEC   	{
648	REWD   	char
648	IDEN   	c
648	SPEC   	;
650	REWD   	while
650	SPEC   	(
650	SPEC   	(
650	IDEN   	c
650	OPER   	=
650	IDEN   	fgetc
650	SPEC   	(
650	IDEN   	fr
650	OPER   	->
650	IDEN   	fin
650	SPEC   	)
650	SPEC   	)
650	OPER   	!=
650	IDEN   	EOF
650	SPEC   	)
651	SPEC   	{
652	REWD   	if
652	SPEC   	(
652	IDEN   	isspace
652	SPEC   	(
652	IDEN   	c
652	SPEC   	)
652	SPEC   	)
653	SPEC   	{
654	REWD   	if
654	SPEC   	(
654	IDEN   	c
654	OPER   	==
654	CHAR   	\\n
654	SPEC   	)
655	SPEC   	{
656	IDEN   	fr
656	OPER   	->
656	IDEN   	line_number
656	OPER   	++
656	SPEC   	;
657	SPEC   	}
658	SPEC   	}
659	REWD   	else
659	REWD   	if
659	SPEC   	(
659	IDEN   	isalpha
659	SPEC   	(
659	IDEN   	c
659	SPEC   	)
659	OPER   	||
659	IDEN   	c
659	OPER   	==
659	CHAR   	_
659	SPEC   	)
660	SPEC   	{
661	IDEN   	fseek
661	SPEC   	(
661	IDEN   	fr
661	OPER   	->
661	IDEN   	fin
661	OPER   	,
661	OPER   	,
661	IDEN   	SEEK_CUR
661	SPEC   	)
661	SPEC   	;
662	IDEN   	ScanToken
662	SPEC   	(
662	IDEN   	fr
662	OPER   	,
662	IDEN   	fout
662	OPER   	,
662	IDEN   	scan_identifier
662	SPEC   	)
662	SPEC   	;
663	SPEC   	}
664	REWD   	else
664	REWD   	if
664	SPEC   	(
664	IDEN   	isdigit
664	SPEC   	(
664	IDEN   	c
664	SPEC   	)
664	SPEC   	)
665	SPEC   	{
666	IDEN   	fseek
666	SPEC   	(
666	IDEN   	fr
666	OPER   	->
666	IDEN   	fin
666	OPER   	,
666	OPER   	,
666	IDEN   	SEEK_CUR
666	SPEC   	)
666	SPEC   	;
667	REWD   	if
667	SPEC   	(
667	IDEN   	c
667	OPER   	==
667	CHAR   	0
667	SPEC   	)
668	SPEC   	{
669	SC     	
670	REWD   	char
670	IDEN   	nextChar
670	OPER   	=
670	IDEN   	fgetc
670	SPEC   	(
670	IDEN   	fr
670	OPER   	->
670	IDEN   	fin
670	SPEC   	)
670	SPEC   	;
671	REWD   	if
671	SPEC   	(
671	IDEN   	nextChar
671	OPER   	==
671	CHAR   	x
671	OPER   	||
671	IDEN   	nextChar
671	OPER   	==
671	CHAR   	X
671	SPEC   	)
672	SPEC   	{
673	SC     	
674	IDEN   	fseek
674	SPEC   	(
674	IDEN   	fr
674	OPER   	->
674	IDEN   	fin
674	OPER   	,
674	OPER   	,
674	IDEN   	SEEK_CUR
674	SPEC   	)
674	SPEC   	;
675	IDEN   	ScanToken
675	SPEC   	(
675	IDEN   	fr
675	OPER   	,
675	IDEN   	fout
675	OPER   	,
675	IDEN   	scan_hexadecimal
675	SPEC   	)
675	SPEC   	;
676	SPEC   	}
677	REWD   	else
678	SPEC   	{
679	SC     	
680	IDEN   	fseek
680	SPEC   	(
680	IDEN   	fr
680	OPER   	->
680	IDEN   	fin
680	OPER   	,
680	OPER   	,
680	IDEN   	SEEK_CUR
680	SPEC   	)
680	SPEC   	;
681	IDEN   	ScanToken
681	SPEC   	(
681	IDEN   	fr
681	OPER   	,
681	IDEN   	fout
681	OPER   	,
681	IDEN   	scan_octal
681	SPEC   	)
681	SPEC   	;
683	SPEC   	}
684	SPEC   	}
685	REWD   	else
686	SPEC   	{
687	IDEN   	ScanToken
687	SPEC   	(
687	IDEN   	fr
687	OPER   	,
687	IDEN   	fout
687	OPER   	,
687	IDEN   	scan_integer
687	SPEC   	)
687	SPEC   	;
688	SPEC   	}
689	SPEC   	}
690	REWD   	else
690	REWD   	if
690	SPEC   	(
690	IDEN   	c
690	OPER   	==
690	CHAR   	\\'
690	SPEC   	)
691	SPEC   	{
692	IDEN   	ScanToken
692	SPEC   	(
692	IDEN   	fr
692	OPER   	,
692	IDEN   	fout
692	OPER   	,
692	IDEN   	scan_character
692	SPEC   	)
692	SPEC   	;
693	SPEC   	}
694	REWD   	else
694	REWD   	if
694	SPEC   	(
694	IDEN   	c
694	OPER   	==
694	CHAR   	\\"
694	SPEC   	)
695	SPEC   	{
696	IDEN   	ScanToken
696	SPEC   	(
696	IDEN   	fr
696	OPER   	,
696	IDEN   	fout
696	OPER   	,
696	IDEN   	scan_string
696	SPEC   	)
696	SPEC   	;
697	SPEC   	}
698	REWD   	else
698	REWD   	if
698	SPEC   	(
698	IDEN   	c
698	OPER   	==
698	CHAR   	/
698	SPEC   	)
699	SPEC   	{
700	IDEN   	c
700	OPER   	=
700	IDEN   	fgetc
700	SPEC   	(
700	IDEN   	fr
700	OPER   	->
700	IDEN   	fin
700	SPEC   	)
700	SPEC   	;
701	REWD   	if
701	SPEC   	(
701	IDEN   	c
701	OPER   	==
701	CHAR   	/
701	SPEC   	)
702	SPEC   	{
703	IDEN   	ScanToken
703	SPEC   	(
703	IDEN   	fr
703	OPER   	,
703	IDEN   	fout
703	OPER   	,
703	IDEN   	scan_single_comment
703	SPEC   	)
703	SPEC   	;
704	SPEC   	}
705	REWD   	else
705	REWD   	if
705	SPEC   	(
705	IDEN   	c
705	OPER   	==
705	CHAR   	*
705	SPEC   	)
706	SPEC   	{
707	IDEN   	ScanToken
707	SPEC   	(
707	IDEN   	fr
707	OPER   	,
707	IDEN   	fout
707	OPER   	,
707	IDEN   	scan_multi_comment
707	SPEC   	)
707	SPEC   	;
708	SPEC   	}
709	REWD   	else
710	SPEC   	{
711	IDEN   	fseek
711	SPEC   	(
711	IDEN   	fr
711	OPER   	->
711	IDEN   	fin
711	OPER   	,
711	OPER   	,
711	IDEN   	SEEK_CUR
711	SPEC   	)
711	SPEC   	;
712	IDEN   	ScanToken
712	SPEC   	(
712	IDEN   	fr
712	OPER   	,
712	IDEN   	fout
712	OPER   	,
712	IDEN   	scan_operator
712	SPEC   	)
712	SPEC   	;
713	SPEC   	}
714	SPEC   	}
715	REWD   	else
715	REWD   	if
715	SPEC   	(
715	IDEN   	c
715	OPER   	==
715	CHAR   	.
715	SPEC   	)
716	SPEC   	{
717	IDEN   	fseek
717	SPEC   	(
717	IDEN   	fr
717	OPER   	->
717	IDEN   	fin
717	OPER   	,
717	OPER   	,
717	IDEN   	SEEK_CUR
717	SPEC   	)
717	SPEC   	;
718	IDEN   	ScanToken
718	SPEC   	(
718	IDEN   	fr
718	OPER   	,
718	IDEN   	fout
718	OPER   	,
718	IDEN   	scan_float
718	SPEC   	)
718	SPEC   	;
719	SPEC   	}
720	REWD   	else
720	REWD   	if
720	SPEC   	(
720	IDEN   	c
720	OPER   	==
720	CHAR   	#
720	SPEC   	)
721	SPEC   	{
722	IDEN   	fseek
722	SPEC   	(
722	IDEN   	fr
722	OPER   	->
722	IDEN   	fin
722	OPER   	,
722	OPER   	,
722	IDEN   	SEEK_CUR
722	SPEC   	)
722	SPEC   	;
723	IDEN   	ScanToken
723	SPEC   	(
723	IDEN   	fr
723	OPER   	,
723	IDEN   	fout
723	OPER   	,
723	IDEN   	scan_preprocessor
723	SPEC   	)
723	SPEC   	;
724	SPEC   	}
725	REWD   	else
725	REWD   	if
725	SPEC   	(
725	IDEN   	c
725	OPER   	==
725	CHAR   	+
725	OPER   	||
725	IDEN   	c
725	OPER   	==
725	CHAR   	-
725	OPER   	||
725	IDEN   	c
725	OPER   	==
725	CHAR   	.
725	SPEC   	)
726	SPEC   	{
727	REWD   	char
727	IDEN   	nextChar
727	OPER   	=
727	IDEN   	fgetc
727	SPEC   	(
727	IDEN   	fr
727	OPER   	->
727	IDEN   	fin
727	SPEC   	)
727	SPEC   	;
728	REWD   	if
728	SPEC   	(
728	IDEN   	isdigit
728	SPEC   	(
728	IDEN   	nextChar
728	SPEC   	)
728	SPEC   	)
729	SPEC   	{
730	IDEN   	fseek
730	SPEC   	(
730	IDEN   	fr
730	OPER   	->
730	IDEN   	fin
730	OPER   	,
730	OPER   	,
730	IDEN   	SEEK_CUR
730	SPEC   	)
730	SPEC   	;
731	IDEN   	ScanToken
731	SPEC   	(
731	IDEN   	fr
731	OPER   	,
731	IDEN   	fout
731	OPER   	,
731	IDEN   	scan_float
731	SPEC   	)
731	SPEC   	;
732	SPEC   	}
733	REWD   	else
734	SPEC   	{
735	IDEN   	fseek
735	SPEC   	(
735	IDEN   	fr
735	OPER   	->
735	IDEN   	fin
735	OPER   	,
735	OPER   	,
735	IDEN   	SEEK_CUR
735	SPEC   	)
735	SPEC   	;
736	IDEN   	ScanToken
736	SPEC   	(
736	IDEN   	fr
736	OPER   	,
736	IDEN   	fout
736	OPER   	,
736	IDEN   	scan_operator
736	SPEC   	)
736	SPEC   	;
737	SPEC   	}
738	SPEC   	}
739	REWD   	else
740	SPEC   	{
741	IDEN   	fseek
741	SPEC   	(
741	IDEN   	fr
741	OPER   	->
741	IDEN   	fin
741	OPER   	,
741	OPER   	,
741	IDEN   	SEEK_CUR
741	SPEC   	)
741	SPEC   	;
742	IDEN   	ScanToken
742	SPEC   	(
742	IDEN   	fr
742	OPER   	,
742	IDEN   	fout
742	OPER   	,
742	IDEN   	scan_operator
742	SPEC   	)
742	SPEC   	;
743	SPEC   	}
745	IDEN   	c
745	OPER   	=
745	IDEN   	fgetc
745	SPEC   	(
745	IDEN   	fr
745	OPER   	->
745	IDEN   	fin
745	SPEC   	)
745	SPEC   	;
746	REWD   	if
746	SPEC   	(
746	IDEN   	c
746	OPER   	==
746	CHAR   	\\n
746	SPEC   	)
747	SPEC   	{
748	IDEN   	fr
748	OPER   	->
748	IDEN   	line_number
748	OPER   	++
748	SPEC   	;
749	SPEC   	}
750	REWD   	else
751	SPEC   	{
752	IDEN   	fseek
752	SPEC   	(
752	IDEN   	fr
752	OPER   	->
752	IDEN   	fin
752	OPER   	,
752	OPER   	,
752	IDEN   	SEEK_CUR
752	SPEC   	)
752	SPEC   	;
753	SPEC   	}
754	SPEC   	}
755	SPEC   	}
757	REWD   	int
758	IDEN   	main
758	SPEC   	(
758	SPEC   	)
759	SPEC   	{
760	SC     	
761	IDEN   	FileReader
761	OPER   	*
761	IDEN   	fr
761	OPER   	=
761	SPEC   	(
761	IDEN   	FileReader
761	OPER   	*
761	SPEC   	)
761	IDEN   	malloc
761	SPEC   	(
761	REWD   	sizeof
761	SPEC   	(
761	IDEN   	FileReader
761	SPEC   	)
761	SPEC   	)
761	SPEC   	;
762	IDEN   	fr
762	OPER   	->
762	IDEN   	fin
762	OPER   	=
762	IDEN   	fopen
762	SPEC   	(
762	IDEN   	DEFAULT_INPUT_FILENAME
762	OPER   	,
762	STR    	r
762	SPEC   	)
762	SPEC   	;
763	IDEN   	fr
763	OPER   	->
763	IDEN   	line_number
763	OPER   	=
763	INTE   	1
763	SPEC   	;
765	SC     	
766	IDEN   	FILE
766	OPER   	*
766	IDEN   	fout
766	OPER   	=
766	IDEN   	fopen
766	SPEC   	(
766	IDEN   	DEFAULT_OUTPUT_FILENAME
766	OPER   	,
766	STR    	w
766	SPEC   	)
766	SPEC   	;
768	REWD   	if
768	SPEC   	(
768	IDEN   	fr
768	OPER   	->
768	IDEN   	fin
768	OPER   	==
768	IDEN   	NULL
768	OPER   	||
768	IDEN   	fout
768	OPER   	==
768	IDEN   	NULL
768	SPEC   	)
769	SPEC   	{
770	IDEN   	fprintf
770	SPEC   	(
770	IDEN   	stderr
770	OPER   	,
770	STR    	Error opening files.\n
770	SPEC   	)
770	SPEC   	;
771	REWD   	return
771	IDEN   	EXIT_FAILURE
771	SPEC   	;
772	SPEC   	}
774	IDEN   	ScanToken
774	SPEC   	(
774	IDEN   	fr
774	OPER   	,
774	IDEN   	fout
774	OPER   	,
774	IDEN   	scan_tokens
774	SPEC   	)
774	SPEC   	;
776	IDEN   	fclose
776	SPEC   	(
776	IDEN   	fr
776	OPER   	->
776	IDEN   	fin
776	SPEC   	)
776	SPEC   	;
777	IDEN   	fclose
777	SPEC   	(
777	IDEN   	fout
777	SPEC   	)
777	SPEC   	;
778	IDEN   	free
778	SPEC   	(
778	IDEN   	fr
778	SPEC   	)
778	SPEC   	;
780	IDEN   	printf
780	SPEC   	(
780	STR    	The output is sucessful in %s
780	OPER   	,
780	IDEN   	DEFAULT_OUTPUT_FILENAME
780	SPEC   	)
780	SPEC   	;
781	REWD   	return
781	IDEN   	EXIT_SUCCESS
781	SPEC   	;
782	SPEC   	}
