1-11	MC
15	PREP   	#include <stdio.h>
16	PREP   	#include <stdlib.h>
17	PREP   	#include <stdbool.h>
18	PREP   	#include <ctype.h>
19	PREP   	#include <string.h>
22	PREP   	#define DEFAULT_INPUT_FILENAME "scanner.c"
23	PREP   	#define DEFAULT_OUTPUT_FILENAME "output.txt"
25	PREP   	#define REWD_MAX_LEN 10
28	REWD   	const
28	REWD   	char
28	IDEN   	rewds
28	OPER   	[
28	OPER   	]
28	OPER   	[
28	IDEN   	REWD_MAX_LEN
28	OPER   	]
28	OPER   	=
28	SPEC   	{
28	SC     	
29	STR    	if
29	OPER   	,
29	STR    	do
29	OPER   	,
29	STR    	for
29	OPER   	,
29	STR    	int
29	OPER   	,
29	STR    	break
29	OPER   	,
29	STR    	default
29	OPER   	,
29	STR    	float
29	OPER   	,
30	STR    	double
30	OPER   	,
30	STR    	case
30	OPER   	,
30	STR    	else
30	OPER   	,
30	STR    	extern
30	OPER   	,
30	STR    	sizeof
30	OPER   	,
30	STR    	register
30	OPER   	,
31	STR    	while
31	OPER   	,
31	STR    	enum
31	OPER   	,
31	STR    	union
31	OPER   	,
31	STR    	goto
31	OPER   	,
31	STR    	auto
31	OPER   	,
31	STR    	char
31	OPER   	,
31	STR    	const
31	OPER   	,
32	STR    	static
32	OPER   	,
32	STR    	switch
32	OPER   	,
32	STR    	continue
32	OPER   	,
32	STR    	struct
32	OPER   	,
32	STR    	return
33	SPEC   	}
33	SPEC   	;
35	IDEN   	typedef
35	REWD   	struct
36	SPEC   	{
37	IDEN   	FILE
37	OPER   	*
37	IDEN   	fin
37	SPEC   	;
38	REWD   	int
38	IDEN   	line_number
38	SPEC   	;
39	SPEC   	}
39	IDEN   	FileReader
39	SPEC   	;
41	IDEN   	typedef
41	IDEN   	void
41	SPEC   	(
41	OPER   	*
41	IDEN   	TokenScan
41	SPEC   	)
41	SPEC   	(
41	IDEN   	FileReader
41	OPER   	*
41	IDEN   	fr
41	OPER   	,
41	IDEN   	FILE
41	OPER   	*
41	IDEN   	fout
41	SPEC   	)
41	SPEC   	;
43	IDEN   	typedef
43	REWD   	enum
44	SPEC   	{
45	IDEN   	IDEN
45	OPER   	,
46	IDEN   	REWD
46	OPER   	,
47	IDEN   	INTE
47	OPER   	,
48	IDEN   	FLOT
48	OPER   	,
49	IDEN   	CHAR
49	OPER   	,
50	IDEN   	STR
50	OPER   	,
51	IDEN   	OPER
51	OPER   	,
52	IDEN   	SPEC
52	OPER   	,
53	IDEN   	SC
53	OPER   	,
54	IDEN   	MC
54	OPER   	,
55	IDEN   	PREP
56	SPEC   	}
56	IDEN   	TokenType
56	SPEC   	;
58	SC     	
59	IDEN   	void
59	OPER   	*
59	IDEN   	ScanScan
59	SPEC   	(
59	IDEN   	FileReader
59	OPER   	*
59	IDEN   	fr
59	OPER   	,
59	IDEN   	FILE
59	OPER   	*
59	IDEN   	fout
59	OPER   	,
59	IDEN   	TokenType
59	IDEN   	Opt
59	SPEC   	)
59	SPEC   	;
60	REWD   	const
60	REWD   	char
60	OPER   	*
60	IDEN   	token_type_to_string
60	SPEC   	(
60	IDEN   	TokenType
60	IDEN   	type
60	SPEC   	)
60	SPEC   	;
61	IDEN   	void
61	IDEN   	report_token
61	SPEC   	(
61	IDEN   	FileReader
61	OPER   	*
61	IDEN   	fr
61	OPER   	,
61	IDEN   	FILE
61	OPER   	*
61	IDEN   	fout
61	OPER   	,
61	IDEN   	TokenType
61	IDEN   	type
61	OPER   	,
61	REWD   	const
61	REWD   	char
61	OPER   	*
61	IDEN   	token
61	SPEC   	)
61	SPEC   	;
62	IDEN   	void
62	IDEN   	scan_identifier
62	SPEC   	(
62	IDEN   	FileReader
62	OPER   	*
62	IDEN   	fr
62	OPER   	,
62	IDEN   	FILE
62	OPER   	*
62	IDEN   	fout
62	SPEC   	)
62	SPEC   	;
63	IDEN   	bool
63	IDEN   	scan_reserved
63	SPEC   	(
63	IDEN   	FileReader
63	OPER   	*
63	IDEN   	fr
63	OPER   	,
63	IDEN   	FILE
63	OPER   	*
63	IDEN   	fout
63	OPER   	,
63	REWD   	char
63	OPER   	*
63	IDEN   	buffer
63	SPEC   	)
63	SPEC   	;
64	IDEN   	void
64	IDEN   	scan_integer
64	SPEC   	(
64	IDEN   	FileReader
64	OPER   	*
64	IDEN   	fr
64	OPER   	,
64	IDEN   	FILE
64	OPER   	*
64	IDEN   	fout
64	SPEC   	)
64	SPEC   	;
65	IDEN   	void
65	IDEN   	scan_float
65	SPEC   	(
65	IDEN   	FileReader
65	OPER   	*
65	IDEN   	fr
65	OPER   	,
65	IDEN   	FILE
65	OPER   	*
65	IDEN   	fout
65	SPEC   	)
65	SPEC   	;
66	IDEN   	void
66	IDEN   	scan_character
66	SPEC   	(
66	IDEN   	FileReader
66	OPER   	*
66	IDEN   	fr
66	OPER   	,
66	IDEN   	FILE
66	OPER   	*
66	IDEN   	fout
66	SPEC   	)
66	SPEC   	;
67	IDEN   	void
67	IDEN   	scan_string
67	SPEC   	(
67	IDEN   	FileReader
67	OPER   	*
67	IDEN   	fr
67	OPER   	,
67	IDEN   	FILE
67	OPER   	*
67	IDEN   	fout
67	SPEC   	)
67	SPEC   	;
68	IDEN   	void
68	IDEN   	scan_operator
68	SPEC   	(
68	IDEN   	FileReader
68	OPER   	*
68	IDEN   	fr
68	OPER   	,
68	IDEN   	FILE
68	OPER   	*
68	IDEN   	fout
68	SPEC   	)
68	SPEC   	;
69	IDEN   	void
69	IDEN   	scan_special
69	SPEC   	(
69	IDEN   	FileReader
69	OPER   	*
69	IDEN   	fr
69	OPER   	,
69	IDEN   	FILE
69	OPER   	*
69	IDEN   	fout
69	SPEC   	)
69	SPEC   	;
70	IDEN   	void
70	IDEN   	scan_single_comment
70	SPEC   	(
70	IDEN   	FileReader
70	OPER   	*
70	IDEN   	fr
70	OPER   	,
70	IDEN   	FILE
70	OPER   	*
70	IDEN   	fout
70	SPEC   	)
70	SPEC   	;
71	IDEN   	void
71	IDEN   	scan_multi_comment
71	SPEC   	(
71	IDEN   	FileReader
71	OPER   	*
71	IDEN   	fr
71	OPER   	,
71	IDEN   	FILE
71	OPER   	*
71	IDEN   	fout
71	SPEC   	)
71	SPEC   	;
72	IDEN   	void
72	IDEN   	scan_preprocessor
72	SPEC   	(
72	IDEN   	FileReader
72	OPER   	*
72	IDEN   	fr
72	OPER   	,
72	IDEN   	FILE
72	OPER   	*
72	IDEN   	fout
72	SPEC   	)
72	SPEC   	;
75	REWD   	int
76	IDEN   	compare
76	SPEC   	(
76	REWD   	const
76	IDEN   	void
76	OPER   	*
76	IDEN   	arg1
76	OPER   	,
76	REWD   	const
76	IDEN   	void
76	OPER   	*
76	IDEN   	arg2
76	SPEC   	)
76	SPEC   	{
77	REWD   	return
77	SPEC   	(
77	OPER   	*
77	SPEC   	(
77	REWD   	int
77	OPER   	*
77	SPEC   	)
77	IDEN   	arg1
77	OPER   	-
77	OPER   	*
77	SPEC   	(
77	REWD   	int
77	OPER   	*
77	SPEC   	)
77	IDEN   	arg2
77	SPEC   	)
77	SPEC   	;
78	SPEC   	}
80	SC     	
81	IDEN   	void
81	IDEN   	ScanToken
81	SPEC   	(
81	IDEN   	FileReader
81	OPER   	*
81	IDEN   	fr
81	OPER   	,
81	IDEN   	FILE
81	OPER   	*
81	IDEN   	fout
81	OPER   	,
81	IDEN   	TokenScan
81	IDEN   	Opt
81	SPEC   	)
82	SPEC   	{
83	REWD   	return
83	IDEN   	Opt
83	SPEC   	(
83	IDEN   	fr
83	OPER   	,
83	IDEN   	fout
83	SPEC   	)
83	SPEC   	;
84	SPEC   	}
86	REWD   	const
86	REWD   	char
86	OPER   	*
87	IDEN   	token_type_to_string
87	SPEC   	(
87	IDEN   	TokenType
87	IDEN   	type
87	SPEC   	)
88	SPEC   	{
89	REWD   	switch
89	SPEC   	(
89	IDEN   	type
89	SPEC   	)
90	SPEC   	{
91	REWD   	case
91	IDEN   	IDEN
91	SPEC   	:
92	REWD   	return
92	STR    	IDEN
92	SPEC   	;
93	REWD   	case
93	IDEN   	REWD
93	SPEC   	:
94	REWD   	return
94	STR    	REWD
94	SPEC   	;
95	REWD   	case
95	IDEN   	INTE
95	SPEC   	:
96	REWD   	return
96	STR    	INTE
96	SPEC   	;
97	REWD   	case
97	IDEN   	FLOT
97	SPEC   	:
98	REWD   	return
98	STR    	FLOT
98	SPEC   	;
99	REWD   	case
99	IDEN   	CHAR
99	SPEC   	:
100	REWD   	return
100	STR    	CHAR
100	SPEC   	;
101	REWD   	case
101	IDEN   	STR
101	SPEC   	:
102	REWD   	return
102	STR    	STR
102	SPEC   	;
103	REWD   	case
103	IDEN   	OPER
103	SPEC   	:
104	REWD   	return
104	STR    	OPER
104	SPEC   	;
105	REWD   	case
105	IDEN   	SPEC
105	SPEC   	:
106	REWD   	return
106	STR    	SPEC
106	SPEC   	;
107	REWD   	case
107	IDEN   	SC
107	SPEC   	:
108	REWD   	return
108	STR    	SC
108	SPEC   	;
109	REWD   	case
109	IDEN   	MC
109	SPEC   	:
110	REWD   	return
110	STR    	MC
110	SPEC   	;
111	REWD   	case
111	IDEN   	PREP
111	SPEC   	:
112	REWD   	return
112	STR    	PREP
112	SPEC   	;
113	REWD   	default
113	SPEC   	:
114	REWD   	return
114	STR    	UNKNOWN
114	SPEC   	;
115	SPEC   	}
116	SPEC   	}
118	IDEN   	void
119	IDEN   	report_token
119	SPEC   	(
119	IDEN   	FileReader
119	OPER   	*
119	IDEN   	fr
119	OPER   	,
119	IDEN   	FILE
119	OPER   	*
119	IDEN   	fout
119	OPER   	,
119	IDEN   	TokenType
119	IDEN   	type
119	OPER   	,
119	REWD   	const
119	REWD   	char
119	OPER   	*
119	IDEN   	token
119	SPEC   	)
120	SPEC   	{
121	IDEN   	fprintf
121	SPEC   	(
121	IDEN   	fout
121	OPER   	,
121	STR    	%d\t%-7s\t%s\n
121	OPER   	,
121	IDEN   	fr
121	OPER   	->
121	IDEN   	line_number
121	OPER   	,
121	IDEN   	token_type_to_string
121	SPEC   	(
121	IDEN   	type
121	SPEC   	)
121	OPER   	,
121	IDEN   	token
121	SPEC   	)
121	SPEC   	;
122	SPEC   	}
124	IDEN   	bool
125	IDEN   	scan_reserved
125	SPEC   	(
125	IDEN   	FileReader
125	OPER   	*
125	IDEN   	fr
125	OPER   	,
125	IDEN   	FILE
125	OPER   	*
125	IDEN   	fout
125	OPER   	,
125	REWD   	char
125	OPER   	*
125	IDEN   	buffer
125	SPEC   	)
126	SPEC   	{
127	REWD   	char
127	OPER   	*
127	IDEN   	ch
127	OPER   	=
127	IDEN   	bsearch
127	SPEC   	(
127	IDEN   	buffer
127	OPER   	,
127	IDEN   	rewds
127	OPER   	,
127	INTE   	25
127	OPER   	,
127	IDEN   	REWD_MAX_LEN
127	OPER   	,
127	IDEN   	compare
127	SPEC   	)
127	SPEC   	;
128	REWD   	if
128	SPEC   	(
128	IDEN   	ch
128	OPER   	!=
128	IDEN   	NULL
128	SPEC   	)
129	SPEC   	{
130	IDEN   	report_token
130	SPEC   	(
130	IDEN   	fr
130	OPER   	,
130	IDEN   	fout
130	OPER   	,
130	IDEN   	REWD
130	OPER   	,
130	IDEN   	buffer
130	SPEC   	)
130	SPEC   	;
131	REWD   	return
131	IDEN   	true
131	SPEC   	;
132	SPEC   	}
133	REWD   	else
134	SPEC   	{
135	REWD   	return
135	IDEN   	false
135	SPEC   	;
136	SPEC   	}
137	SPEC   	}
140	IDEN   	void
141	IDEN   	scan_identifier
141	SPEC   	(
141	IDEN   	FileReader
141	OPER   	*
141	IDEN   	fr
141	OPER   	,
141	IDEN   	FILE
141	OPER   	*
141	IDEN   	fout
141	SPEC   	)
142	SPEC   	{
143	REWD   	char
143	IDEN   	c
143	OPER   	=
143	IDEN   	fgetc
143	SPEC   	(
143	IDEN   	fr
143	OPER   	->
143	IDEN   	fin
143	SPEC   	)
143	SPEC   	;
144	REWD   	char
144	IDEN   	buffer
144	OPER   	[
144	INTE   	256
144	OPER   	]
144	SPEC   	;
145	REWD   	int
145	IDEN   	index
145	OPER   	=
145	INTE   	0
145	SPEC   	;
146	IDEN   	buffer
146	OPER   	[
146	IDEN   	index
146	OPER   	++
146	OPER   	]
146	OPER   	=
146	IDEN   	c
146	SPEC   	;
148	REWD   	while
148	SPEC   	(
148	SPEC   	(
148	IDEN   	c
148	OPER   	=
148	IDEN   	fgetc
148	SPEC   	(
148	IDEN   	fr
148	OPER   	->
148	IDEN   	fin
148	SPEC   	)
148	SPEC   	)
148	OPER   	!=
148	IDEN   	EOF
149	OPER   	&&
149	SPEC   	(
149	IDEN   	isalpha
149	SPEC   	(
149	IDEN   	c
149	SPEC   	)
149	OPER   	||
149	IDEN   	isdigit
149	SPEC   	(
149	IDEN   	c
149	SPEC   	)
149	OPER   	||
149	IDEN   	c
149	OPER   	==
149	CHAR   	_
149	SPEC   	)
149	SPEC   	)
150	SPEC   	{
151	IDEN   	buffer
151	OPER   	[
151	IDEN   	index
151	OPER   	++
151	OPER   	]
151	OPER   	=
151	IDEN   	c
151	SPEC   	;
152	SPEC   	}
154	IDEN   	buffer
154	OPER   	[
154	IDEN   	index
154	OPER   	]
154	OPER   	=
154	CHAR   	\\0
154	SPEC   	;
156	IDEN   	fseek
156	SPEC   	(
156	IDEN   	fr
156	OPER   	->
156	IDEN   	fin
156	OPER   	,
156	OPER   	,
156	IDEN   	SEEK_CUR
156	SPEC   	)
156	SPEC   	;
157	REWD   	if
157	SPEC   	(
157	OPER   	!
157	IDEN   	scan_reserved
157	SPEC   	(
157	IDEN   	fr
157	OPER   	,
157	IDEN   	fout
157	OPER   	,
157	IDEN   	buffer
157	SPEC   	)
157	SPEC   	)
158	SPEC   	{
159	IDEN   	report_token
159	SPEC   	(
159	IDEN   	fr
159	OPER   	,
159	IDEN   	fout
159	OPER   	,
159	IDEN   	IDEN
159	OPER   	,
159	IDEN   	buffer
159	SPEC   	)
159	SPEC   	;
160	SPEC   	}
161	SPEC   	}
163	IDEN   	void
164	IDEN   	scan_integer
164	SPEC   	(
164	IDEN   	FileReader
164	OPER   	*
164	IDEN   	fr
164	OPER   	,
164	IDEN   	FILE
164	OPER   	*
164	IDEN   	fout
164	SPEC   	)
165	SPEC   	{
166	REWD   	char
166	IDEN   	c
166	OPER   	=
166	IDEN   	fgetc
166	SPEC   	(
166	IDEN   	fr
166	OPER   	->
166	IDEN   	fin
166	SPEC   	)
166	SPEC   	;
167	REWD   	char
167	IDEN   	buffer
167	OPER   	[
167	INTE   	256
167	OPER   	]
167	SPEC   	;
168	REWD   	int
168	IDEN   	index
168	OPER   	=
168	INTE   	0
168	SPEC   	;
170	SC     	
171	REWD   	if
171	SPEC   	(
171	IDEN   	c
171	OPER   	==
171	CHAR   	+
171	OPER   	||
171	IDEN   	c
171	OPER   	==
171	CHAR   	-
171	SPEC   	)
172	SPEC   	{
173	IDEN   	buffer
173	OPER   	[
173	IDEN   	index
173	OPER   	++
173	OPER   	]
173	OPER   	=
173	IDEN   	c
173	SPEC   	;
174	IDEN   	c
174	OPER   	=
174	IDEN   	fgetc
174	SPEC   	(
174	IDEN   	fr
174	OPER   	->
174	IDEN   	fin
174	SPEC   	)
174	SPEC   	;
175	SPEC   	}
178	REWD   	int
178	IDEN   	cnt
178	OPER   	=
178	INTE   	1
178	SPEC   	;
179	SC     	
180	REWD   	while
180	SPEC   	(
180	IDEN   	isdigit
180	SPEC   	(
180	IDEN   	c
180	SPEC   	)
180	SPEC   	)
181	SPEC   	{
182	IDEN   	buffer
182	OPER   	[
182	IDEN   	index
182	OPER   	++
182	OPER   	]
182	OPER   	=
182	IDEN   	c
182	SPEC   	;
183	IDEN   	c
183	OPER   	=
183	IDEN   	fgetc
183	SPEC   	(
183	IDEN   	fr
183	OPER   	->
183	IDEN   	fin
183	SPEC   	)
183	SPEC   	;
184	IDEN   	cnt
184	OPER   	++
184	SPEC   	;
185	REWD   	if
185	SPEC   	(
185	IDEN   	c
185	OPER   	==
185	CHAR   	.
185	SPEC   	)
186	SPEC   	{
187	IDEN   	fseek
187	SPEC   	(
187	IDEN   	fr
187	OPER   	->
187	IDEN   	fin
187	OPER   	,
187	INTE   	0
187	OPER   	-
187	IDEN   	cnt
187	OPER   	,
187	IDEN   	SEEK_CUR
187	SPEC   	)
187	SPEC   	;
188	REWD   	return
188	IDEN   	scan_float
188	SPEC   	(
188	IDEN   	fr
188	OPER   	,
188	IDEN   	fout
188	SPEC   	)
188	SPEC   	;
189	SPEC   	}
190	SPEC   	}
191	IDEN   	fseek
191	SPEC   	(
191	IDEN   	fr
191	OPER   	->
191	IDEN   	fin
191	OPER   	,
191	OPER   	,
191	IDEN   	SEEK_CUR
191	SPEC   	)
191	SPEC   	;
193	SC     	
194	REWD   	if
194	SPEC   	(
194	OPER   	!
194	IDEN   	isdigit
194	SPEC   	(
194	IDEN   	buffer
194	OPER   	[
194	IDEN   	index
194	OPER   	-
194	INTE   	1
194	OPER   	]
194	SPEC   	)
194	SPEC   	)
195	SPEC   	{
196	IDEN   	fseek
196	SPEC   	(
196	IDEN   	fr
196	OPER   	->
196	IDEN   	fin
196	OPER   	,
196	OPER   	,
196	IDEN   	SEEK_CUR
196	SPEC   	)
196	SPEC   	;
197	IDEN   	index
197	OPER   	--
197	SPEC   	;
198	SPEC   	}
200	IDEN   	buffer
200	OPER   	[
200	IDEN   	index
200	OPER   	]
200	OPER   	=
200	CHAR   	\\0
200	SPEC   	;
202	SC     	
203	IDEN   	report_token
203	SPEC   	(
203	IDEN   	fr
203	OPER   	,
203	IDEN   	fout
203	OPER   	,
203	IDEN   	INTE
203	OPER   	,
203	IDEN   	buffer
203	SPEC   	)
203	SPEC   	;
204	SPEC   	}
206	IDEN   	void
207	IDEN   	scan_hexadecimal
207	SPEC   	(
207	IDEN   	FileReader
207	OPER   	*
207	IDEN   	fr
207	OPER   	,
207	IDEN   	FILE
207	OPER   	*
207	IDEN   	fout
207	SPEC   	)
208	SPEC   	{
209	REWD   	char
209	IDEN   	c
209	OPER   	=
209	IDEN   	fgetc
209	SPEC   	(
209	IDEN   	fr
209	OPER   	->
209	IDEN   	fin
209	SPEC   	)
209	SPEC   	;
210	REWD   	char
210	IDEN   	buffer
210	OPER   	[
210	INTE   	256
210	OPER   	]
210	SPEC   	;
211	REWD   	int
211	IDEN   	index
211	OPER   	=
211	INTE   	0
211	SPEC   	;
212	IDEN   	buffer
212	OPER   	[
212	IDEN   	index
212	OPER   	++
212	OPER   	]
212	OPER   	=
212	IDEN   	c
212	SPEC   	;
214	REWD   	while
214	SPEC   	(
214	SPEC   	(
214	IDEN   	c
214	OPER   	=
214	IDEN   	fgetc
214	SPEC   	(
214	IDEN   	fr
214	OPER   	->
214	IDEN   	fin
214	SPEC   	)
214	SPEC   	)
214	OPER   	!=
214	IDEN   	EOF
214	OPER   	&&
214	IDEN   	isxdigit
214	SPEC   	(
214	IDEN   	c
214	SPEC   	)
214	SPEC   	)
215	SPEC   	{
216	IDEN   	buffer
216	OPER   	[
216	IDEN   	index
216	OPER   	++
216	OPER   	]
216	OPER   	=
216	IDEN   	c
216	SPEC   	;
217	SPEC   	}
219	IDEN   	buffer
219	OPER   	[
219	IDEN   	index
219	OPER   	]
219	OPER   	=
219	CHAR   	\\0
219	SPEC   	;
221	IDEN   	fseek
221	SPEC   	(
221	IDEN   	fr
221	OPER   	->
221	IDEN   	fin
221	OPER   	,
221	OPER   	,
221	IDEN   	SEEK_CUR
221	SPEC   	)
221	SPEC   	;
222	IDEN   	report_token
222	SPEC   	(
222	IDEN   	fr
222	OPER   	,
222	IDEN   	fout
222	OPER   	,
222	IDEN   	INTE
222	OPER   	,
222	IDEN   	buffer
222	SPEC   	)
222	SPEC   	;
223	SPEC   	}
225	IDEN   	void
226	IDEN   	scan_octal
226	SPEC   	(
226	IDEN   	FileReader
226	OPER   	*
226	IDEN   	fr
226	OPER   	,
226	IDEN   	FILE
226	OPER   	*
226	IDEN   	fout
226	SPEC   	)
227	SPEC   	{
228	REWD   	char
228	IDEN   	c
228	OPER   	=
228	IDEN   	fgetc
228	SPEC   	(
228	IDEN   	fr
228	OPER   	->
228	IDEN   	fin
228	SPEC   	)
228	SPEC   	;
229	REWD   	char
229	IDEN   	buffer
229	OPER   	[
229	INTE   	256
229	OPER   	]
229	SPEC   	;
230	REWD   	int
230	IDEN   	index
230	OPER   	=
230	INTE   	0
230	SPEC   	;
231	IDEN   	buffer
231	OPER   	[
231	IDEN   	index
231	OPER   	++
231	OPER   	]
231	OPER   	=
231	IDEN   	c
231	SPEC   	;
233	REWD   	while
233	SPEC   	(
233	SPEC   	(
233	IDEN   	c
233	OPER   	=
233	IDEN   	fgetc
233	SPEC   	(
233	IDEN   	fr
233	OPER   	->
233	IDEN   	fin
233	SPEC   	)
233	SPEC   	)
233	OPER   	!=
233	IDEN   	EOF
233	OPER   	&&
233	IDEN   	c
233	OPER   	>=
233	CHAR   	0
233	OPER   	&&
233	IDEN   	c
233	OPER   	<=
233	CHAR   	7
233	SPEC   	)
234	SPEC   	{
235	IDEN   	buffer
235	OPER   	[
235	IDEN   	index
235	OPER   	++
235	OPER   	]
235	OPER   	=
235	IDEN   	c
235	SPEC   	;
236	SPEC   	}
238	IDEN   	buffer
238	OPER   	[
238	IDEN   	index
238	OPER   	]
238	OPER   	=
238	CHAR   	\\0
238	SPEC   	;
240	IDEN   	fseek
240	SPEC   	(
240	IDEN   	fr
240	OPER   	->
240	IDEN   	fin
240	OPER   	,
240	OPER   	,
240	IDEN   	SEEK_CUR
240	SPEC   	)
240	SPEC   	;
241	IDEN   	report_token
241	SPEC   	(
241	IDEN   	fr
241	OPER   	,
241	IDEN   	fout
241	OPER   	,
241	IDEN   	INTE
241	OPER   	,
241	IDEN   	buffer
241	SPEC   	)
241	SPEC   	;
242	SPEC   	}
244	IDEN   	void
245	IDEN   	scan_float
245	SPEC   	(
245	IDEN   	FileReader
245	OPER   	*
245	IDEN   	fr
245	OPER   	,
245	IDEN   	FILE
245	OPER   	*
245	IDEN   	fout
245	SPEC   	)
246	SPEC   	{
247	REWD   	char
247	IDEN   	c
247	OPER   	=
247	IDEN   	fgetc
247	SPEC   	(
247	IDEN   	fr
247	OPER   	->
247	IDEN   	fin
247	SPEC   	)
247	SPEC   	;
248	REWD   	char
248	IDEN   	buffer
248	OPER   	[
248	INTE   	256
248	OPER   	]
248	SPEC   	;
249	REWD   	int
249	IDEN   	index
249	OPER   	=
249	INTE   	0
249	SPEC   	;
251	SC     	
252	REWD   	if
252	SPEC   	(
252	IDEN   	c
252	OPER   	==
252	CHAR   	+
252	OPER   	||
252	IDEN   	c
252	OPER   	==
252	CHAR   	-
252	SPEC   	)
253	SPEC   	{
254	IDEN   	buffer
254	OPER   	[
254	IDEN   	index
254	OPER   	++
254	OPER   	]
254	OPER   	=
254	IDEN   	c
254	SPEC   	;
255	IDEN   	c
255	OPER   	=
255	IDEN   	fgetc
255	SPEC   	(
255	IDEN   	fr
255	OPER   	->
255	IDEN   	fin
255	SPEC   	)
255	SPEC   	;
256	SPEC   	}
258	SC     	
259	REWD   	while
259	SPEC   	(
259	IDEN   	isdigit
259	SPEC   	(
259	IDEN   	c
259	SPEC   	)
259	SPEC   	)
260	SPEC   	{
261	IDEN   	buffer
261	OPER   	[
261	IDEN   	index
261	OPER   	++
261	OPER   	]
261	OPER   	=
261	IDEN   	c
261	SPEC   	;
262	IDEN   	c
262	OPER   	=
262	IDEN   	fgetc
262	SPEC   	(
262	IDEN   	fr
262	OPER   	->
262	IDEN   	fin
262	SPEC   	)
262	SPEC   	;
263	SPEC   	}
265	SC     	
266	REWD   	if
266	SPEC   	(
266	IDEN   	c
266	OPER   	==
266	CHAR   	.
266	SPEC   	)
267	SPEC   	{
268	IDEN   	buffer
268	OPER   	[
268	IDEN   	index
268	OPER   	++
268	OPER   	]
268	OPER   	=
268	IDEN   	c
268	SPEC   	;
269	IDEN   	c
269	OPER   	=
269	IDEN   	fgetc
269	SPEC   	(
269	IDEN   	fr
269	OPER   	->
269	IDEN   	fin
269	SPEC   	)
269	SPEC   	;
271	SC     	
272	REWD   	while
272	SPEC   	(
272	IDEN   	isdigit
272	SPEC   	(
272	IDEN   	c
272	SPEC   	)
272	SPEC   	)
273	SPEC   	{
274	IDEN   	buffer
274	OPER   	[
274	IDEN   	index
274	OPER   	++
274	OPER   	]
274	OPER   	=
274	IDEN   	c
274	SPEC   	;
275	IDEN   	c
275	OPER   	=
275	IDEN   	fgetc
275	SPEC   	(
275	IDEN   	fr
275	OPER   	->
275	IDEN   	fin
275	SPEC   	)
275	SPEC   	;
276	SPEC   	}
277	SPEC   	}
278	REWD   	else
279	SPEC   	{
280	IDEN   	fseek
280	SPEC   	(
280	IDEN   	fr
280	OPER   	->
280	IDEN   	fin
280	OPER   	,
280	OPER   	-
280	IDEN   	index
280	OPER   	,
280	IDEN   	SEEK_CUR
280	SPEC   	)
280	SPEC   	;
281	REWD   	return
281	SPEC   	;
282	SPEC   	}
284	SC     	
285	REWD   	switch
285	SPEC   	(
285	IDEN   	c
285	SPEC   	)
286	SPEC   	{
287	REWD   	case
287	CHAR   	e
287	SPEC   	:
288	REWD   	case
288	CHAR   	E
288	SPEC   	:
289	IDEN   	buffer
289	OPER   	[
289	IDEN   	index
289	OPER   	++
289	OPER   	]
289	OPER   	=
289	IDEN   	c
289	SPEC   	;
290	IDEN   	c
290	OPER   	=
290	IDEN   	fgetc
290	SPEC   	(
290	IDEN   	fr
290	OPER   	->
290	IDEN   	fin
290	SPEC   	)
290	SPEC   	;
292	SC     	
293	REWD   	switch
293	SPEC   	(
293	IDEN   	c
293	SPEC   	)
294	SPEC   	{
295	REWD   	case
295	CHAR   	+
295	SPEC   	:
296	REWD   	case
296	CHAR   	-
296	SPEC   	:
297	IDEN   	buffer
297	OPER   	[
297	IDEN   	index
297	OPER   	++
297	OPER   	]
297	OPER   	=
297	IDEN   	c
297	SPEC   	;
298	IDEN   	c
298	OPER   	=
298	IDEN   	fgetc
298	SPEC   	(
298	IDEN   	fr
298	OPER   	->
298	IDEN   	fin
298	SPEC   	)
298	SPEC   	;
299	REWD   	if
299	SPEC   	(
299	IDEN   	isdigit
299	SPEC   	(
299	IDEN   	c
299	SPEC   	)
299	SPEC   	)
300	SPEC   	{
301	IDEN   	buffer
301	OPER   	[
301	IDEN   	index
301	OPER   	++
301	OPER   	]
301	OPER   	=
301	IDEN   	c
301	SPEC   	;
302	IDEN   	c
302	OPER   	=
302	IDEN   	fgetc
302	SPEC   	(
302	IDEN   	fr
302	OPER   	->
302	IDEN   	fin
302	SPEC   	)
302	SPEC   	;
303	SPEC   	}
304	REWD   	else
305	SPEC   	{
306	IDEN   	fseek
306	SPEC   	(
306	IDEN   	fr
306	OPER   	->
306	IDEN   	fin
306	OPER   	,
306	OPER   	,
306	IDEN   	SEEK_CUR
306	SPEC   	)
306	SPEC   	;
307	SPEC   	}
308	REWD   	break
308	SPEC   	;
309	REWD   	default
309	SPEC   	:
310	IDEN   	fseek
310	SPEC   	(
310	IDEN   	fr
310	OPER   	->
310	IDEN   	fin
310	OPER   	,
310	OPER   	,
310	IDEN   	SEEK_CUR
310	SPEC   	)
310	SPEC   	;
311	REWD   	break
311	SPEC   	;
312	SPEC   	}
313	SC     	
314	REWD   	while
314	SPEC   	(
314	IDEN   	isdigit
314	SPEC   	(
314	IDEN   	c
314	SPEC   	)
314	SPEC   	)
315	SPEC   	{
316	IDEN   	buffer
316	OPER   	[
316	IDEN   	index
316	OPER   	++
316	OPER   	]
316	OPER   	=
316	IDEN   	c
316	SPEC   	;
317	IDEN   	c
317	OPER   	=
317	IDEN   	fgetc
317	SPEC   	(
317	IDEN   	fr
317	OPER   	->
317	IDEN   	fin
317	SPEC   	)
317	SPEC   	;
318	SPEC   	}
319	REWD   	break
319	SPEC   	;
320	REWD   	default
320	SPEC   	:
321	IDEN   	fseek
321	SPEC   	(
321	IDEN   	fr
321	OPER   	->
321	IDEN   	fin
321	OPER   	,
321	OPER   	,
321	IDEN   	SEEK_CUR
321	SPEC   	)
321	SPEC   	;
322	REWD   	break
322	SPEC   	;
324	SPEC   	}
326	IDEN   	buffer
326	OPER   	[
326	IDEN   	index
326	OPER   	]
326	OPER   	=
326	CHAR   	\\0
326	SPEC   	;
328	SC     	
329	IDEN   	report_token
329	SPEC   	(
329	IDEN   	fr
329	OPER   	,
329	IDEN   	fout
329	OPER   	,
329	IDEN   	FLOT
329	OPER   	,
329	IDEN   	buffer
329	SPEC   	)
329	SPEC   	;
330	SPEC   	}
335	IDEN   	void
336	IDEN   	scan_character
336	SPEC   	(
336	IDEN   	FileReader
336	OPER   	*
336	IDEN   	fr
336	OPER   	,
336	IDEN   	FILE
336	OPER   	*
336	IDEN   	fout
336	SPEC   	)
337	SPEC   	{
338	REWD   	char
338	IDEN   	c
338	SPEC   	;
339	REWD   	char
339	IDEN   	buffer
339	OPER   	[
339	INTE   	256
339	OPER   	]
339	SPEC   	;
340	REWD   	int
340	IDEN   	index
340	OPER   	=
340	INTE   	0
340	SPEC   	;
342	REWD   	while
342	SPEC   	(
342	SPEC   	(
342	IDEN   	c
342	OPER   	=
342	IDEN   	fgetc
342	SPEC   	(
342	IDEN   	fr
342	OPER   	->
342	IDEN   	fin
342	SPEC   	)
342	SPEC   	)
342	OPER   	!=
342	IDEN   	EOF
342	OPER   	&&
342	IDEN   	c
342	OPER   	!=
342	CHAR   	\\'
342	SPEC   	)
343	SPEC   	{
344	IDEN   	buffer
344	OPER   	[
344	IDEN   	index
344	OPER   	++
344	OPER   	]
344	OPER   	=
344	IDEN   	c
344	SPEC   	;
346	SC     	
347	REWD   	if
347	SPEC   	(
347	IDEN   	c
347	OPER   	==
347	CHAR   	\\\
347	SPEC   	)
348	SPEC   	{
349	IDEN   	c
349	OPER   	=
349	IDEN   	fgetc
349	SPEC   	(
349	IDEN   	fr
349	OPER   	->
349	IDEN   	fin
349	SPEC   	)
349	SPEC   	;
350	IDEN   	buffer
350	OPER   	[
350	IDEN   	index
350	OPER   	++
350	OPER   	]
350	OPER   	=
350	CHAR   	\\\
350	SPEC   	;
351	IDEN   	buffer
351	OPER   	[
351	IDEN   	index
351	OPER   	++
351	OPER   	]
351	OPER   	=
351	IDEN   	c
351	SPEC   	;
352	SPEC   	}
353	SPEC   	}
355	REWD   	if
355	SPEC   	(
355	IDEN   	c
355	OPER   	==
355	CHAR   	\\'
355	SPEC   	)
356	SPEC   	{
357	IDEN   	buffer
357	OPER   	[
357	IDEN   	index
357	OPER   	]
357	OPER   	=
357	CHAR   	\\0
357	SPEC   	;
358	IDEN   	report_token
358	SPEC   	(
358	IDEN   	fr
358	OPER   	,
358	IDEN   	fout
358	OPER   	,
358	IDEN   	CHAR
358	OPER   	,
358	IDEN   	buffer
358	SPEC   	)
358	SPEC   	;
359	SPEC   	}
360	REWD   	else
361	SPEC   	{
362	IDEN   	fprintf
362	SPEC   	(
362	IDEN   	fout
362	OPER   	,
362	STR    	Invalid character constant at line %d\n
362	OPER   	,
362	IDEN   	fr
362	OPER   	->
362	IDEN   	line_number
362	SPEC   	)
362	SPEC   	;
363	SPEC   	}
364	SPEC   	}
366	IDEN   	void
367	IDEN   	scan_string
367	SPEC   	(
367	IDEN   	FileReader
367	OPER   	*
367	IDEN   	fr
367	OPER   	,
367	IDEN   	FILE
367	OPER   	*
367	IDEN   	fout
367	SPEC   	)
368	SPEC   	{
369	REWD   	char
369	IDEN   	c
369	SPEC   	;
370	REWD   	char
370	IDEN   	buffer
370	OPER   	[
370	INTE   	256
370	OPER   	]
370	SPEC   	;
371	REWD   	int
371	IDEN   	index
371	OPER   	=
371	INTE   	0
371	SPEC   	;
372	REWD   	int
372	IDEN   	line_start
372	OPER   	=
372	IDEN   	fr
372	OPER   	->
372	IDEN   	line_number
372	SPEC   	;
374	REWD   	while
374	SPEC   	(
374	SPEC   	(
374	IDEN   	c
374	OPER   	=
374	IDEN   	fgetc
374	SPEC   	(
374	IDEN   	fr
374	OPER   	->
374	IDEN   	fin
374	SPEC   	)
374	SPEC   	)
374	OPER   	!=
374	IDEN   	EOF
374	SPEC   	)
375	SPEC   	{
376	SC     	
377	REWD   	if
377	SPEC   	(
377	IDEN   	c
377	OPER   	==
377	CHAR   	\\\
377	SPEC   	)
378	SPEC   	{
379	IDEN   	buffer
379	OPER   	[
379	IDEN   	index
379	OPER   	++
379	OPER   	]
379	OPER   	=
379	CHAR   	\\\
379	SPEC   	;
380	IDEN   	c
380	OPER   	=
380	IDEN   	fgetc
380	SPEC   	(
380	IDEN   	fr
380	OPER   	->
380	IDEN   	fin
380	SPEC   	)
380	SPEC   	;
381	IDEN   	buffer
381	OPER   	[
381	IDEN   	index
381	OPER   	++
381	OPER   	]
381	OPER   	=
381	IDEN   	c
381	SPEC   	;
382	IDEN   	c
382	OPER   	=
382	IDEN   	fgetc
382	SPEC   	(
382	IDEN   	fr
382	OPER   	->
382	IDEN   	fin
382	SPEC   	)
382	SPEC   	;
383	SPEC   	}
385	REWD   	if
385	SPEC   	(
385	IDEN   	c
385	OPER   	==
385	CHAR   	\\"
385	SPEC   	)
386	SPEC   	{
387	IDEN   	buffer
387	OPER   	[
387	IDEN   	index
387	OPER   	]
387	OPER   	=
387	CHAR   	\\0
387	SPEC   	;
388	IDEN   	report_token
388	SPEC   	(
388	IDEN   	fr
388	OPER   	,
388	IDEN   	fout
388	OPER   	,
388	IDEN   	STR
388	OPER   	,
388	IDEN   	buffer
388	SPEC   	)
388	SPEC   	;
389	REWD   	return
389	SPEC   	;
390	SPEC   	}
391	REWD   	else
391	REWD   	if
391	SPEC   	(
391	IDEN   	c
391	OPER   	==
391	CHAR   	\\n
391	SPEC   	)
392	SPEC   	{
393	IDEN   	fprintf
393	SPEC   	(
393	IDEN   	fout
393	OPER   	,
393	STR    	%d \t STR\t%s \tERROR: missing \"\n
393	OPER   	,
393	IDEN   	line_start
393	OPER   	,
393	IDEN   	buffer
393	SPEC   	)
393	SPEC   	;
394	IDEN   	fr
394	OPER   	->
394	IDEN   	line_number
394	OPER   	++
394	SPEC   	;
395	REWD   	return
395	SPEC   	;
396	SPEC   	}
397	REWD   	else
398	SPEC   	{
399	IDEN   	buffer
399	OPER   	[
399	IDEN   	index
399	OPER   	++
399	OPER   	]
399	OPER   	=
399	IDEN   	c
399	SPEC   	;
400	SPEC   	}
401	SPEC   	}
403	IDEN   	fprintf
403	SPEC   	(
403	IDEN   	fout
403	OPER   	,
403	STR    	%d\tSTR\t\t%s  ERROR: missing \"\n
403	OPER   	,
403	IDEN   	line_start
403	OPER   	,
403	IDEN   	buffer
403	SPEC   	)
403	SPEC   	;
404	SPEC   	}
407	IDEN   	void
408	IDEN   	scan_preprocessor
408	SPEC   	(
408	IDEN   	FileReader
408	OPER   	*
408	IDEN   	fr
408	OPER   	,
408	IDEN   	FILE
408	OPER   	*
408	IDEN   	fout
408	SPEC   	)
409	SPEC   	{
410	REWD   	char
410	IDEN   	c
410	OPER   	=
410	IDEN   	fgetc
410	SPEC   	(
410	IDEN   	fr
410	OPER   	->
410	IDEN   	fin
410	SPEC   	)
410	SPEC   	;
411	REWD   	char
411	IDEN   	buffer
411	OPER   	[
411	INTE   	256
411	OPER   	]
411	SPEC   	;
412	REWD   	int
412	IDEN   	index
412	OPER   	=
412	INTE   	0
412	SPEC   	;
413	IDEN   	buffer
413	OPER   	[
413	IDEN   	index
413	OPER   	++
413	OPER   	]
413	OPER   	=
413	IDEN   	c
413	SPEC   	;
415	SC     	
416	REWD   	while
416	SPEC   	(
416	IDEN   	c
416	OPER   	!=
416	CHAR   	\\n
416	OPER   	&&
416	IDEN   	c
416	OPER   	!=
416	IDEN   	EOF
416	SPEC   	)
417	SPEC   	{
418	IDEN   	c
418	OPER   	=
418	IDEN   	fgetc
418	SPEC   	(
418	IDEN   	fr
418	OPER   	->
418	IDEN   	fin
418	SPEC   	)
418	SPEC   	;
419	IDEN   	buffer
419	OPER   	[
419	IDEN   	index
419	OPER   	++
419	OPER   	]
419	OPER   	=
419	IDEN   	c
419	SPEC   	;
420	SPEC   	}
421	IDEN   	buffer
421	OPER   	[
421	IDEN   	index
421	OPER   	-
421	INTE   	1
421	OPER   	]
421	OPER   	=
421	CHAR   	\\0
421	SPEC   	;
422	IDEN   	fr
422	OPER   	->
422	IDEN   	line_number
422	OPER   	++
422	SPEC   	;
423	IDEN   	report_token
423	SPEC   	(
423	IDEN   	fr
423	OPER   	,
423	IDEN   	fout
423	OPER   	,
423	IDEN   	PREP
423	OPER   	,
423	IDEN   	buffer
423	SPEC   	)
423	SPEC   	;
424	SPEC   	}
426	IDEN   	void
427	IDEN   	scan_operator
427	SPEC   	(
427	IDEN   	FileReader
427	OPER   	*
427	IDEN   	fr
427	OPER   	,
427	IDEN   	FILE
427	OPER   	*
427	IDEN   	fout
427	SPEC   	)
428	SPEC   	{
429	REWD   	char
429	IDEN   	c
429	OPER   	=
429	IDEN   	fgetc
429	SPEC   	(
429	IDEN   	fr
429	OPER   	->
429	IDEN   	fin
429	SPEC   	)
429	SPEC   	;
430	REWD   	char
430	IDEN   	ch
430	SPEC   	;
431	REWD   	char
431	IDEN   	buffer
431	OPER   	[
431	INTE   	3
431	OPER   	]
431	SPEC   	;
432	IDEN   	buffer
432	OPER   	[
432	INTE   	0
432	OPER   	]
432	OPER   	=
432	IDEN   	c
432	SPEC   	;
433	IDEN   	buffer
433	OPER   	[
433	INTE   	1
433	OPER   	]
433	OPER   	=
433	CHAR   	\\0
433	SPEC   	;
435	REWD   	switch
435	SPEC   	(
435	IDEN   	c
435	SPEC   	)
436	SPEC   	{
437	REWD   	case
437	CHAR   	+
437	SPEC   	:
437	SC     	
438	IDEN   	ch
438	OPER   	=
438	IDEN   	fgetc
438	SPEC   	(
438	IDEN   	fr
438	OPER   	->
438	IDEN   	fin
438	SPEC   	)
438	SPEC   	;
439	REWD   	switch
439	SPEC   	(
439	IDEN   	ch
439	SPEC   	)
440	SPEC   	{
441	REWD   	case
441	CHAR   	+
441	SPEC   	:
442	IDEN   	buffer
442	OPER   	[
442	INTE   	1
442	OPER   	]
442	OPER   	=
442	CHAR   	+
442	SPEC   	;
443	IDEN   	buffer
443	OPER   	[
443	INTE   	2
443	OPER   	]
443	OPER   	=
443	CHAR   	\\0
443	SPEC   	;
444	REWD   	break
444	SPEC   	;
445	REWD   	case
445	CHAR   	=
445	SPEC   	:
446	IDEN   	buffer
446	OPER   	[
446	INTE   	1
446	OPER   	]
446	OPER   	=
446	CHAR   	=
446	SPEC   	;
447	IDEN   	buffer
447	OPER   	[
447	INTE   	2
447	OPER   	]
447	OPER   	=
447	CHAR   	\\0
447	SPEC   	;
448	REWD   	break
448	SPEC   	;
449	REWD   	default
449	SPEC   	:
450	IDEN   	fseek
450	SPEC   	(
450	IDEN   	fr
450	OPER   	->
450	IDEN   	fin
450	OPER   	,
450	OPER   	,
450	IDEN   	SEEK_CUR
450	SPEC   	)
450	SPEC   	;
451	REWD   	break
451	SPEC   	;
452	SPEC   	}
454	REWD   	case
454	CHAR   	-
454	SPEC   	:
454	SC     	
455	IDEN   	ch
455	OPER   	=
455	IDEN   	fgetc
455	SPEC   	(
455	IDEN   	fr
455	OPER   	->
455	IDEN   	fin
455	SPEC   	)
455	SPEC   	;
456	REWD   	switch
456	SPEC   	(
456	IDEN   	ch
456	SPEC   	)
457	SPEC   	{
458	REWD   	case
458	CHAR   	-
458	SPEC   	:
459	IDEN   	buffer
459	OPER   	[
459	INTE   	1
459	OPER   	]
459	OPER   	=
459	CHAR   	-
459	SPEC   	;
460	IDEN   	buffer
460	OPER   	[
460	INTE   	2
460	OPER   	]
460	OPER   	=
460	CHAR   	\\0
460	SPEC   	;
461	REWD   	break
461	SPEC   	;
462	REWD   	case
462	CHAR   	=
462	SPEC   	:
463	IDEN   	buffer
463	OPER   	[
463	INTE   	1
463	OPER   	]
463	OPER   	=
463	CHAR   	=
463	SPEC   	;
464	IDEN   	buffer
464	OPER   	[
464	INTE   	2
464	OPER   	]
464	OPER   	=
464	CHAR   	\\0
464	SPEC   	;
465	REWD   	break
465	SPEC   	;
466	REWD   	case
466	CHAR   	>
466	SPEC   	:
467	IDEN   	buffer
467	OPER   	[
467	INTE   	1
467	OPER   	]
467	OPER   	=
467	CHAR   	>
467	SPEC   	;
468	IDEN   	buffer
468	OPER   	[
468	INTE   	2
468	OPER   	]
468	OPER   	=
468	CHAR   	\\0
468	SPEC   	;
469	REWD   	break
469	SPEC   	;
470	REWD   	default
470	SPEC   	:
471	IDEN   	fseek
471	SPEC   	(
471	IDEN   	fr
471	OPER   	->
471	IDEN   	fin
471	OPER   	,
471	OPER   	,
471	IDEN   	SEEK_CUR
471	SPEC   	)
471	SPEC   	;
472	REWD   	break
472	SPEC   	;
473	SPEC   	}
474	REWD   	case
474	CHAR   	*
474	SPEC   	:
474	SC     	
475	IDEN   	ch
475	OPER   	=
475	IDEN   	fgetc
475	SPEC   	(
475	IDEN   	fr
475	OPER   	->
475	IDEN   	fin
475	SPEC   	)
475	SPEC   	;
476	REWD   	switch
476	SPEC   	(
476	IDEN   	ch
476	SPEC   	)
477	SPEC   	{
478	REWD   	case
478	CHAR   	*
478	SPEC   	:
479	IDEN   	buffer
479	OPER   	[
479	INTE   	1
479	OPER   	]
479	OPER   	=
479	CHAR   	*
479	SPEC   	;
480	IDEN   	buffer
480	OPER   	[
480	INTE   	2
480	OPER   	]
480	OPER   	=
480	CHAR   	\\0
480	SPEC   	;
481	REWD   	break
481	SPEC   	;
482	REWD   	default
482	SPEC   	:
483	IDEN   	fseek
483	SPEC   	(
483	IDEN   	fr
483	OPER   	->
483	IDEN   	fin
483	OPER   	,
483	OPER   	,
483	IDEN   	SEEK_CUR
483	SPEC   	)
483	SPEC   	;
484	REWD   	break
484	SPEC   	;
485	SPEC   	}
486	REWD   	case
486	CHAR   	/
486	SPEC   	:
486	SC     	
487	IDEN   	ch
487	OPER   	=
487	IDEN   	fgetc
487	SPEC   	(
487	IDEN   	fr
487	OPER   	->
487	IDEN   	fin
487	SPEC   	)
487	SPEC   	;
488	REWD   	switch
488	SPEC   	(
488	IDEN   	ch
488	SPEC   	)
489	SPEC   	{
490	REWD   	case
490	CHAR   	=
490	SPEC   	:
491	IDEN   	buffer
491	OPER   	[
491	INTE   	1
491	OPER   	]
491	OPER   	=
491	CHAR   	=
491	SPEC   	;
492	IDEN   	buffer
492	OPER   	[
492	INTE   	2
492	OPER   	]
492	OPER   	=
492	CHAR   	\\0
492	SPEC   	;
493	REWD   	break
493	SPEC   	;
494	REWD   	default
494	SPEC   	:
495	IDEN   	fseek
495	SPEC   	(
495	IDEN   	fr
495	OPER   	->
495	IDEN   	fin
495	OPER   	,
495	OPER   	,
495	IDEN   	SEEK_CUR
495	SPEC   	)
495	SPEC   	;
496	REWD   	break
496	SPEC   	;
497	SPEC   	}
498	REWD   	case
498	CHAR   	%
498	SPEC   	:
498	SC     	
499	IDEN   	ch
499	OPER   	=
499	IDEN   	fgetc
499	SPEC   	(
499	IDEN   	fr
499	OPER   	->
499	IDEN   	fin
499	SPEC   	)
499	SPEC   	;
500	REWD   	switch
500	SPEC   	(
500	IDEN   	ch
500	SPEC   	)
501	SPEC   	{
502	REWD   	case
502	CHAR   	=
502	SPEC   	:
503	IDEN   	buffer
503	OPER   	[
503	INTE   	1
503	OPER   	]
503	OPER   	=
503	CHAR   	=
503	SPEC   	;
504	IDEN   	buffer
504	OPER   	[
504	INTE   	2
504	OPER   	]
504	OPER   	=
504	CHAR   	\\0
504	SPEC   	;
505	REWD   	break
505	SPEC   	;
506	REWD   	default
506	SPEC   	:
507	IDEN   	fseek
507	SPEC   	(
507	IDEN   	fr
507	OPER   	->
507	IDEN   	fin
507	OPER   	,
507	OPER   	,
507	IDEN   	SEEK_CUR
507	SPEC   	)
507	SPEC   	;
508	REWD   	break
508	SPEC   	;
509	SPEC   	}
510	REWD   	case
510	CHAR   	=
510	SPEC   	:
510	SC     	
511	IDEN   	ch
511	OPER   	=
511	IDEN   	fgetc
511	SPEC   	(
511	IDEN   	fr
511	OPER   	->
511	IDEN   	fin
511	SPEC   	)
511	SPEC   	;
512	REWD   	switch
512	SPEC   	(
512	IDEN   	ch
512	SPEC   	)
513	SPEC   	{
514	REWD   	case
514	CHAR   	=
514	SPEC   	:
515	IDEN   	buffer
515	OPER   	[
515	INTE   	1
515	OPER   	]
515	OPER   	=
515	CHAR   	=
515	SPEC   	;
516	IDEN   	buffer
516	OPER   	[
516	INTE   	2
516	OPER   	]
516	OPER   	=
516	CHAR   	\\0
516	SPEC   	;
517	REWD   	break
517	SPEC   	;
518	REWD   	default
518	SPEC   	:
519	IDEN   	fseek
519	SPEC   	(
519	IDEN   	fr
519	OPER   	->
519	IDEN   	fin
519	OPER   	,
519	OPER   	,
519	IDEN   	SEEK_CUR
519	SPEC   	)
519	SPEC   	;
520	REWD   	break
520	SPEC   	;
521	SPEC   	}
522	REWD   	case
522	CHAR   	,
522	SPEC   	:
523	REWD   	case
523	CHAR   	>
523	SPEC   	:
523	SC     	
524	IDEN   	ch
524	OPER   	=
524	IDEN   	fgetc
524	SPEC   	(
524	IDEN   	fr
524	OPER   	->
524	IDEN   	fin
524	SPEC   	)
524	SPEC   	;
525	REWD   	switch
525	SPEC   	(
525	IDEN   	ch
525	SPEC   	)
526	SPEC   	{
527	REWD   	case
527	CHAR   	>
527	SPEC   	:
528	IDEN   	buffer
528	OPER   	[
528	INTE   	1
528	OPER   	]
528	OPER   	=
528	CHAR   	>
528	SPEC   	;
529	IDEN   	buffer
529	OPER   	[
529	INTE   	2
529	OPER   	]
529	OPER   	=
529	CHAR   	\\0
529	SPEC   	;
530	REWD   	break
530	SPEC   	;
531	REWD   	case
531	CHAR   	=
531	SPEC   	:
532	IDEN   	buffer
532	OPER   	[
532	INTE   	1
532	OPER   	]
532	OPER   	=
532	CHAR   	=
532	SPEC   	;
533	IDEN   	buffer
533	OPER   	[
533	INTE   	2
533	OPER   	]
533	OPER   	=
533	CHAR   	\\0
533	SPEC   	;
534	REWD   	break
534	SPEC   	;
535	REWD   	default
535	SPEC   	:
536	IDEN   	fseek
536	SPEC   	(
536	IDEN   	fr
536	OPER   	->
536	IDEN   	fin
536	OPER   	,
536	OPER   	,
536	IDEN   	SEEK_CUR
536	SPEC   	)
536	SPEC   	;
537	REWD   	break
537	SPEC   	;
538	SPEC   	}
539	REWD   	case
539	CHAR   	<
539	SPEC   	:
539	SC     	
540	IDEN   	ch
540	OPER   	=
540	IDEN   	fgetc
540	SPEC   	(
540	IDEN   	fr
540	OPER   	->
540	IDEN   	fin
540	SPEC   	)
540	SPEC   	;
541	REWD   	switch
541	SPEC   	(
541	IDEN   	ch
541	SPEC   	)
542	SPEC   	{
543	REWD   	case
543	CHAR   	<
543	SPEC   	:
544	IDEN   	buffer
544	OPER   	[
544	INTE   	1
544	OPER   	]
544	OPER   	=
544	CHAR   	<
544	SPEC   	;
545	IDEN   	buffer
545	OPER   	[
545	INTE   	2
545	OPER   	]
545	OPER   	=
545	CHAR   	\\0
545	SPEC   	;
546	REWD   	break
546	SPEC   	;
547	REWD   	case
547	CHAR   	=
547	SPEC   	:
548	IDEN   	buffer
548	OPER   	[
548	INTE   	1
548	OPER   	]
548	OPER   	=
548	CHAR   	=
548	SPEC   	;
549	IDEN   	buffer
549	OPER   	[
549	INTE   	2
549	OPER   	]
549	OPER   	=
549	CHAR   	\\0
549	SPEC   	;
550	REWD   	break
550	SPEC   	;
551	REWD   	default
551	SPEC   	:
552	IDEN   	fseek
552	SPEC   	(
552	IDEN   	fr
552	OPER   	->
552	IDEN   	fin
552	OPER   	,
552	OPER   	,
552	IDEN   	SEEK_CUR
552	SPEC   	)
552	SPEC   	;
553	REWD   	break
553	SPEC   	;
554	SPEC   	}
555	REWD   	case
555	CHAR   	!
555	SPEC   	:
555	SC     	
556	IDEN   	ch
556	OPER   	=
556	IDEN   	fgetc
556	SPEC   	(
556	IDEN   	fr
556	OPER   	->
556	IDEN   	fin
556	SPEC   	)
556	SPEC   	;
557	REWD   	switch
557	SPEC   	(
557	IDEN   	ch
557	SPEC   	)
558	SPEC   	{
559	REWD   	case
559	CHAR   	=
559	SPEC   	:
560	IDEN   	buffer
560	OPER   	[
560	INTE   	1
560	OPER   	]
560	OPER   	=
560	CHAR   	=
560	SPEC   	;
561	IDEN   	buffer
561	OPER   	[
561	INTE   	2
561	OPER   	]
561	OPER   	=
561	CHAR   	\\0
561	SPEC   	;
562	REWD   	break
562	SPEC   	;
563	REWD   	default
563	SPEC   	:
564	IDEN   	fseek
564	SPEC   	(
564	IDEN   	fr
564	OPER   	->
564	IDEN   	fin
564	OPER   	,
564	OPER   	,
564	IDEN   	SEEK_CUR
564	SPEC   	)
564	SPEC   	;
565	REWD   	break
565	SPEC   	;
566	SPEC   	}
567	REWD   	case
567	CHAR   	&
567	SPEC   	:
567	SC     	
568	IDEN   	ch
568	OPER   	=
568	IDEN   	fgetc
568	SPEC   	(
568	IDEN   	fr
568	OPER   	->
568	IDEN   	fin
568	SPEC   	)
568	SPEC   	;
569	REWD   	switch
569	SPEC   	(
569	IDEN   	ch
569	SPEC   	)
570	SPEC   	{
571	REWD   	case
571	CHAR   	&
571	SPEC   	:
572	IDEN   	buffer
572	OPER   	[
572	INTE   	1
572	OPER   	]
572	OPER   	=
572	CHAR   	&
572	SPEC   	;
573	IDEN   	buffer
573	OPER   	[
573	INTE   	2
573	OPER   	]
573	OPER   	=
573	CHAR   	\\0
573	SPEC   	;
574	REWD   	break
574	SPEC   	;
575	REWD   	default
575	SPEC   	:
576	IDEN   	fseek
576	SPEC   	(
576	IDEN   	fr
576	OPER   	->
576	IDEN   	fin
576	OPER   	,
576	OPER   	,
576	IDEN   	SEEK_CUR
576	SPEC   	)
576	SPEC   	;
577	REWD   	break
577	SPEC   	;
578	SPEC   	}
579	REWD   	case
579	CHAR   	|
579	SPEC   	:
579	SC     	
580	IDEN   	ch
580	OPER   	=
580	IDEN   	fgetc
580	SPEC   	(
580	IDEN   	fr
580	OPER   	->
580	IDEN   	fin
580	SPEC   	)
580	SPEC   	;
581	REWD   	switch
581	SPEC   	(
581	IDEN   	ch
581	SPEC   	)
582	SPEC   	{
583	REWD   	case
583	CHAR   	|
583	SPEC   	:
584	IDEN   	buffer
584	OPER   	[
584	INTE   	1
584	OPER   	]
584	OPER   	=
584	CHAR   	|
584	SPEC   	;
585	IDEN   	buffer
585	OPER   	[
585	INTE   	2
585	OPER   	]
585	OPER   	=
585	CHAR   	\\0
585	SPEC   	;
586	REWD   	break
586	SPEC   	;
587	REWD   	break
587	SPEC   	;
588	REWD   	default
588	SPEC   	:
589	IDEN   	fseek
589	SPEC   	(
589	IDEN   	fr
589	OPER   	->
589	IDEN   	fin
589	OPER   	,
589	OPER   	,
589	IDEN   	SEEK_CUR
589	SPEC   	)
589	SPEC   	;
590	REWD   	break
590	SPEC   	;
591	SPEC   	}
592	REWD   	case
592	CHAR   	^
592	SPEC   	:
593	REWD   	case
593	CHAR   	[
593	SPEC   	:
594	REWD   	case
594	CHAR   	]
594	SPEC   	:
595	REWD   	case
595	CHAR   	.
595	SPEC   	:
596	IDEN   	report_token
596	SPEC   	(
596	IDEN   	fr
596	OPER   	,
596	IDEN   	fout
596	OPER   	,
596	IDEN   	OPER
596	OPER   	,
596	IDEN   	buffer
596	SPEC   	)
596	SPEC   	;
597	REWD   	break
597	SPEC   	;
598	REWD   	case
598	CHAR   	(
598	SPEC   	:
599	REWD   	case
599	CHAR   	)
599	SPEC   	:
600	REWD   	case
600	CHAR   	{
600	SPEC   	:
601	REWD   	case
601	CHAR   	}
601	SPEC   	:
602	REWD   	case
602	CHAR   	;
602	SPEC   	:
603	REWD   	case
603	CHAR   	?
603	SPEC   	:
604	REWD   	case
604	CHAR   	:
604	SPEC   	:
605	IDEN   	report_token
605	SPEC   	(
605	IDEN   	fr
605	OPER   	,
605	IDEN   	fout
605	OPER   	,
605	IDEN   	SPEC
605	OPER   	,
605	IDEN   	buffer
605	SPEC   	)
605	SPEC   	;
606	REWD   	break
606	SPEC   	;
607	REWD   	default
607	SPEC   	:
608	IDEN   	fprintf
608	SPEC   	(
608	IDEN   	fout
608	OPER   	,
608	STR    	Invalid operator at line %d\n
608	OPER   	,
608	IDEN   	fr
608	OPER   	->
608	IDEN   	line_number
608	SPEC   	)
608	SPEC   	;
609	SPEC   	}
610	SPEC   	}
612	IDEN   	void
613	IDEN   	scan_single_comment
613	SPEC   	(
613	IDEN   	FileReader
613	OPER   	*
613	IDEN   	fr
613	OPER   	,
613	IDEN   	FILE
613	OPER   	*
613	IDEN   	fout
613	SPEC   	)
614	SPEC   	{
615	REWD   	char
615	IDEN   	c
615	SPEC   	;
617	REWD   	while
617	SPEC   	(
617	SPEC   	(
617	IDEN   	c
617	OPER   	=
617	IDEN   	fgetc
617	SPEC   	(
617	IDEN   	fr
617	OPER   	->
617	IDEN   	fin
617	SPEC   	)
617	SPEC   	)
617	OPER   	!=
617	IDEN   	EOF
617	OPER   	&&
617	IDEN   	c
617	OPER   	!=
617	CHAR   	\\n
617	SPEC   	)
618	SPEC   	{
619	SC     	
620	SPEC   	}
621	IDEN   	report_token
621	SPEC   	(
621	IDEN   	fr
621	OPER   	,
621	IDEN   	fout
621	OPER   	,
621	IDEN   	SC
621	OPER   	,
621	STR    	
621	SPEC   	)
621	SPEC   	;
622	IDEN   	fr
622	OPER   	->
622	IDEN   	line_number
622	OPER   	++
622	SPEC   	;
623	SPEC   	}
625	IDEN   	void
626	IDEN   	scan_multi_comment
626	SPEC   	(
626	IDEN   	FileReader
626	OPER   	*
626	IDEN   	fr
626	OPER   	,
626	IDEN   	FILE
626	OPER   	*
626	IDEN   	fout
626	SPEC   	)
627	SPEC   	{
628	REWD   	char
628	IDEN   	c
628	SPEC   	;
629	REWD   	int
629	IDEN   	comment_start_line
629	OPER   	=
629	IDEN   	fr
629	OPER   	->
629	IDEN   	line_number
629	SPEC   	;
630	REWD   	while
630	SPEC   	(
630	SPEC   	(
630	IDEN   	c
630	OPER   	=
630	IDEN   	fgetc
630	SPEC   	(
630	IDEN   	fr
630	OPER   	->
630	IDEN   	fin
630	SPEC   	)
630	SPEC   	)
630	OPER   	!=
630	IDEN   	EOF
630	SPEC   	)
631	SPEC   	{
632	REWD   	if
632	SPEC   	(
632	IDEN   	c
632	OPER   	==
632	CHAR   	*
632	SPEC   	)
633	SPEC   	{
634	REWD   	if
634	SPEC   	(
634	SPEC   	(
634	IDEN   	c
634	OPER   	=
634	IDEN   	fgetc
634	SPEC   	(
634	IDEN   	fr
634	OPER   	->
634	IDEN   	fin
634	SPEC   	)
634	SPEC   	)
634	OPER   	==
634	CHAR   	/
634	SPEC   	)
635	SPEC   	{
636	IDEN   	fprintf
636	SPEC   	(
636	IDEN   	fout
636	OPER   	,
636	STR    	%d-%d\t%s\n
636	OPER   	,
637	IDEN   	comment_start_line
637	OPER   	,
638	IDEN   	fr
638	OPER   	->
638	IDEN   	line_number
638	OPER   	,
639	IDEN   	token_type_to_string
639	SPEC   	(
639	IDEN   	MC
639	SPEC   	)
639	SPEC   	)
639	SPEC   	;
640	REWD   	return
640	SPEC   	;
641	SPEC   	}
642	REWD   	else
643	SPEC   	{
644	IDEN   	fseek
644	SPEC   	(
644	IDEN   	fr
644	OPER   	->
644	IDEN   	fin
644	OPER   	,
644	OPER   	,
644	IDEN   	SEEK_CUR
644	SPEC   	)
644	SPEC   	;
645	SPEC   	}
646	SPEC   	}
647	REWD   	else
647	REWD   	if
647	SPEC   	(
647	IDEN   	c
647	OPER   	==
647	CHAR   	\\n
647	SPEC   	)
648	SPEC   	{
649	IDEN   	fr
649	OPER   	->
649	IDEN   	line_number
649	OPER   	++
649	SPEC   	;
650	SPEC   	}
652	SPEC   	}
653	IDEN   	fprintf
653	SPEC   	(
653	IDEN   	fout
653	OPER   	,
653	STR    	%d-%d\t%s\t\tERROR: missing */\n
653	OPER   	,
653	IDEN   	comment_start_line
653	OPER   	,
653	IDEN   	fr
653	OPER   	->
653	IDEN   	line_number
653	OPER   	,
653	IDEN   	token_type_to_string
653	SPEC   	(
653	IDEN   	MC
653	SPEC   	)
653	SPEC   	)
653	SPEC   	;
654	SPEC   	}
656	IDEN   	void
657	IDEN   	scan_tokens
657	SPEC   	(
657	IDEN   	FileReader
657	OPER   	*
657	IDEN   	fr
657	OPER   	,
657	IDEN   	FILE
657	OPER   	*
657	IDEN   	fout
657	SPEC   	)
658	SPEC   	{
659	REWD   	char
659	IDEN   	c
659	SPEC   	;
661	REWD   	while
661	SPEC   	(
661	SPEC   	(
661	IDEN   	c
661	OPER   	=
661	IDEN   	fgetc
661	SPEC   	(
661	IDEN   	fr
661	OPER   	->
661	IDEN   	fin
661	SPEC   	)
661	SPEC   	)
661	OPER   	!=
661	IDEN   	EOF
661	SPEC   	)
662	SPEC   	{
663	REWD   	if
663	SPEC   	(
663	IDEN   	isspace
663	SPEC   	(
663	IDEN   	c
663	SPEC   	)
663	SPEC   	)
664	SPEC   	{
665	REWD   	if
665	SPEC   	(
665	IDEN   	c
665	OPER   	==
665	CHAR   	\\n
665	SPEC   	)
666	SPEC   	{
667	IDEN   	fr
667	OPER   	->
667	IDEN   	line_number
667	OPER   	++
667	SPEC   	;
668	SPEC   	}
669	SPEC   	}
670	REWD   	else
670	REWD   	if
670	SPEC   	(
670	IDEN   	isalpha
670	SPEC   	(
670	IDEN   	c
670	SPEC   	)
670	OPER   	||
670	IDEN   	c
670	OPER   	==
670	CHAR   	_
670	SPEC   	)
671	SPEC   	{
672	IDEN   	fseek
672	SPEC   	(
672	IDEN   	fr
672	OPER   	->
672	IDEN   	fin
672	OPER   	,
672	OPER   	,
672	IDEN   	SEEK_CUR
672	SPEC   	)
672	SPEC   	;
673	IDEN   	ScanToken
673	SPEC   	(
673	IDEN   	fr
673	OPER   	,
673	IDEN   	fout
673	OPER   	,
673	IDEN   	scan_identifier
673	SPEC   	)
673	SPEC   	;
674	SPEC   	}
675	REWD   	else
675	REWD   	if
675	SPEC   	(
675	IDEN   	isdigit
675	SPEC   	(
675	IDEN   	c
675	SPEC   	)
675	SPEC   	)
676	SPEC   	{
677	IDEN   	fseek
677	SPEC   	(
677	IDEN   	fr
677	OPER   	->
677	IDEN   	fin
677	OPER   	,
677	OPER   	,
677	IDEN   	SEEK_CUR
677	SPEC   	)
677	SPEC   	;
678	REWD   	if
678	SPEC   	(
678	IDEN   	c
678	OPER   	==
678	CHAR   	0
678	SPEC   	)
679	SPEC   	{
680	SC     	
681	REWD   	char
681	IDEN   	nextChar
681	OPER   	=
681	IDEN   	fgetc
681	SPEC   	(
681	IDEN   	fr
681	OPER   	->
681	IDEN   	fin
681	SPEC   	)
681	SPEC   	;
682	REWD   	if
682	SPEC   	(
682	IDEN   	nextChar
682	OPER   	==
682	CHAR   	x
682	OPER   	||
682	IDEN   	nextChar
682	OPER   	==
682	CHAR   	X
682	SPEC   	)
683	SPEC   	{
684	SC     	
685	IDEN   	fseek
685	SPEC   	(
685	IDEN   	fr
685	OPER   	->
685	IDEN   	fin
685	OPER   	,
685	OPER   	,
685	IDEN   	SEEK_CUR
685	SPEC   	)
685	SPEC   	;
686	IDEN   	ScanToken
686	SPEC   	(
686	IDEN   	fr
686	OPER   	,
686	IDEN   	fout
686	OPER   	,
686	IDEN   	scan_hexadecimal
686	SPEC   	)
686	SPEC   	;
687	SPEC   	}
688	REWD   	else
689	SPEC   	{
690	SC     	
691	IDEN   	fseek
691	SPEC   	(
691	IDEN   	fr
691	OPER   	->
691	IDEN   	fin
691	OPER   	,
691	OPER   	,
691	IDEN   	SEEK_CUR
691	SPEC   	)
691	SPEC   	;
692	IDEN   	ScanToken
692	SPEC   	(
692	IDEN   	fr
692	OPER   	,
692	IDEN   	fout
692	OPER   	,
692	IDEN   	scan_octal
692	SPEC   	)
692	SPEC   	;
694	SPEC   	}
695	SPEC   	}
696	REWD   	else
697	SPEC   	{
698	IDEN   	ScanToken
698	SPEC   	(
698	IDEN   	fr
698	OPER   	,
698	IDEN   	fout
698	OPER   	,
698	IDEN   	scan_integer
698	SPEC   	)
698	SPEC   	;
699	SPEC   	}
700	SPEC   	}
701	REWD   	else
701	REWD   	if
701	SPEC   	(
701	IDEN   	c
701	OPER   	==
701	CHAR   	\\'
701	SPEC   	)
702	SPEC   	{
703	IDEN   	ScanToken
703	SPEC   	(
703	IDEN   	fr
703	OPER   	,
703	IDEN   	fout
703	OPER   	,
703	IDEN   	scan_character
703	SPEC   	)
703	SPEC   	;
704	SPEC   	}
705	REWD   	else
705	REWD   	if
705	SPEC   	(
705	IDEN   	c
705	OPER   	==
705	CHAR   	\\"
705	SPEC   	)
706	SPEC   	{
707	IDEN   	ScanToken
707	SPEC   	(
707	IDEN   	fr
707	OPER   	,
707	IDEN   	fout
707	OPER   	,
707	IDEN   	scan_string
707	SPEC   	)
707	SPEC   	;
708	SPEC   	}
709	REWD   	else
709	REWD   	if
709	SPEC   	(
709	IDEN   	c
709	OPER   	==
709	CHAR   	/
709	SPEC   	)
710	SPEC   	{
711	IDEN   	c
711	OPER   	=
711	IDEN   	fgetc
711	SPEC   	(
711	IDEN   	fr
711	OPER   	->
711	IDEN   	fin
711	SPEC   	)
711	SPEC   	;
712	REWD   	if
712	SPEC   	(
712	IDEN   	c
712	OPER   	==
712	CHAR   	/
712	SPEC   	)
713	SPEC   	{
714	IDEN   	ScanToken
714	SPEC   	(
714	IDEN   	fr
714	OPER   	,
714	IDEN   	fout
714	OPER   	,
714	IDEN   	scan_single_comment
714	SPEC   	)
714	SPEC   	;
715	SPEC   	}
716	REWD   	else
716	REWD   	if
716	SPEC   	(
716	IDEN   	c
716	OPER   	==
716	CHAR   	*
716	SPEC   	)
717	SPEC   	{
718	IDEN   	ScanToken
718	SPEC   	(
718	IDEN   	fr
718	OPER   	,
718	IDEN   	fout
718	OPER   	,
718	IDEN   	scan_multi_comment
718	SPEC   	)
718	SPEC   	;
719	SPEC   	}
720	REWD   	else
721	SPEC   	{
722	IDEN   	fseek
722	SPEC   	(
722	IDEN   	fr
722	OPER   	->
722	IDEN   	fin
722	OPER   	,
722	OPER   	,
722	IDEN   	SEEK_CUR
722	SPEC   	)
722	SPEC   	;
723	IDEN   	ScanToken
723	SPEC   	(
723	IDEN   	fr
723	OPER   	,
723	IDEN   	fout
723	OPER   	,
723	IDEN   	scan_operator
723	SPEC   	)
723	SPEC   	;
724	SPEC   	}
725	SPEC   	}
726	REWD   	else
726	REWD   	if
726	SPEC   	(
726	IDEN   	c
726	OPER   	==
726	CHAR   	.
726	SPEC   	)
727	SPEC   	{
728	IDEN   	fseek
728	SPEC   	(
728	IDEN   	fr
728	OPER   	->
728	IDEN   	fin
728	OPER   	,
728	OPER   	,
728	IDEN   	SEEK_CUR
728	SPEC   	)
728	SPEC   	;
729	IDEN   	ScanToken
729	SPEC   	(
729	IDEN   	fr
729	OPER   	,
729	IDEN   	fout
729	OPER   	,
729	IDEN   	scan_float
729	SPEC   	)
729	SPEC   	;
730	SPEC   	}
731	REWD   	else
731	REWD   	if
731	SPEC   	(
731	IDEN   	c
731	OPER   	==
731	CHAR   	#
731	SPEC   	)
732	SPEC   	{
733	IDEN   	fseek
733	SPEC   	(
733	IDEN   	fr
733	OPER   	->
733	IDEN   	fin
733	OPER   	,
733	OPER   	,
733	IDEN   	SEEK_CUR
733	SPEC   	)
733	SPEC   	;
734	IDEN   	ScanToken
734	SPEC   	(
734	IDEN   	fr
734	OPER   	,
734	IDEN   	fout
734	OPER   	,
734	IDEN   	scan_preprocessor
734	SPEC   	)
734	SPEC   	;
735	SPEC   	}
736	REWD   	else
736	REWD   	if
736	SPEC   	(
736	IDEN   	c
736	OPER   	==
736	CHAR   	+
736	OPER   	||
736	IDEN   	c
736	OPER   	==
736	CHAR   	-
736	OPER   	||
736	IDEN   	c
736	OPER   	==
736	CHAR   	.
736	SPEC   	)
737	SPEC   	{
738	REWD   	char
738	IDEN   	nextChar
738	OPER   	=
738	IDEN   	fgetc
738	SPEC   	(
738	IDEN   	fr
738	OPER   	->
738	IDEN   	fin
738	SPEC   	)
738	SPEC   	;
739	REWD   	if
739	SPEC   	(
739	IDEN   	isdigit
739	SPEC   	(
739	IDEN   	nextChar
739	SPEC   	)
739	SPEC   	)
740	SPEC   	{
741	IDEN   	fseek
741	SPEC   	(
741	IDEN   	fr
741	OPER   	->
741	IDEN   	fin
741	OPER   	,
741	OPER   	,
741	IDEN   	SEEK_CUR
741	SPEC   	)
741	SPEC   	;
742	IDEN   	ScanToken
742	SPEC   	(
742	IDEN   	fr
742	OPER   	,
742	IDEN   	fout
742	OPER   	,
742	IDEN   	scan_float
742	SPEC   	)
742	SPEC   	;
743	SPEC   	}
744	REWD   	else
745	SPEC   	{
746	IDEN   	fseek
746	SPEC   	(
746	IDEN   	fr
746	OPER   	->
746	IDEN   	fin
746	OPER   	,
746	OPER   	,
746	IDEN   	SEEK_CUR
746	SPEC   	)
746	SPEC   	;
747	IDEN   	ScanToken
747	SPEC   	(
747	IDEN   	fr
747	OPER   	,
747	IDEN   	fout
747	OPER   	,
747	IDEN   	scan_operator
747	SPEC   	)
747	SPEC   	;
748	SPEC   	}
749	SPEC   	}
750	REWD   	else
751	SPEC   	{
752	IDEN   	fseek
752	SPEC   	(
752	IDEN   	fr
752	OPER   	->
752	IDEN   	fin
752	OPER   	,
752	OPER   	,
752	IDEN   	SEEK_CUR
752	SPEC   	)
752	SPEC   	;
753	IDEN   	ScanToken
753	SPEC   	(
753	IDEN   	fr
753	OPER   	,
753	IDEN   	fout
753	OPER   	,
753	IDEN   	scan_operator
753	SPEC   	)
753	SPEC   	;
754	SPEC   	}
756	IDEN   	c
756	OPER   	=
756	IDEN   	fgetc
756	SPEC   	(
756	IDEN   	fr
756	OPER   	->
756	IDEN   	fin
756	SPEC   	)
756	SPEC   	;
757	REWD   	if
757	SPEC   	(
757	IDEN   	c
757	OPER   	==
757	CHAR   	\\n
757	SPEC   	)
758	SPEC   	{
759	IDEN   	fr
759	OPER   	->
759	IDEN   	line_number
759	OPER   	++
759	SPEC   	;
760	SPEC   	}
761	REWD   	else
762	SPEC   	{
763	IDEN   	fseek
763	SPEC   	(
763	IDEN   	fr
763	OPER   	->
763	IDEN   	fin
763	OPER   	,
763	OPER   	,
763	IDEN   	SEEK_CUR
763	SPEC   	)
763	SPEC   	;
764	SPEC   	}
765	SPEC   	}
766	SPEC   	}
768	REWD   	int
769	IDEN   	main
769	SPEC   	(
769	SPEC   	)
770	SPEC   	{
771	SC     	
772	IDEN   	FileReader
772	OPER   	*
772	IDEN   	fr
772	OPER   	=
772	SPEC   	(
772	IDEN   	FileReader
772	OPER   	*
772	SPEC   	)
772	IDEN   	malloc
772	SPEC   	(
772	REWD   	sizeof
772	SPEC   	(
772	IDEN   	FileReader
772	SPEC   	)
772	SPEC   	)
772	SPEC   	;
773	IDEN   	fr
773	OPER   	->
773	IDEN   	fin
773	OPER   	=
773	IDEN   	fopen
773	SPEC   	(
773	IDEN   	DEFAULT_INPUT_FILENAME
773	OPER   	,
773	STR    	r
773	SPEC   	)
773	SPEC   	;
774	IDEN   	fr
774	OPER   	->
774	IDEN   	line_number
774	OPER   	=
774	INTE   	1
774	SPEC   	;
776	SC     	
777	IDEN   	FILE
777	OPER   	*
777	IDEN   	fout
777	OPER   	=
777	IDEN   	fopen
777	SPEC   	(
777	IDEN   	DEFAULT_OUTPUT_FILENAME
777	OPER   	,
777	STR    	w
777	SPEC   	)
777	SPEC   	;
779	REWD   	if
779	SPEC   	(
779	IDEN   	fr
779	OPER   	->
779	IDEN   	fin
779	OPER   	==
779	IDEN   	NULL
779	OPER   	||
779	IDEN   	fout
779	OPER   	==
779	IDEN   	NULL
779	SPEC   	)
780	SPEC   	{
781	IDEN   	fprintf
781	SPEC   	(
781	IDEN   	stderr
781	OPER   	,
781	STR    	Error opening files.\n
781	SPEC   	)
781	SPEC   	;
782	REWD   	return
782	IDEN   	EXIT_FAILURE
782	SPEC   	;
783	SPEC   	}
785	IDEN   	ScanToken
785	SPEC   	(
785	IDEN   	fr
785	OPER   	,
785	IDEN   	fout
785	OPER   	,
785	IDEN   	scan_tokens
785	SPEC   	)
785	SPEC   	;
787	IDEN   	fclose
787	SPEC   	(
787	IDEN   	fr
787	OPER   	->
787	IDEN   	fin
787	SPEC   	)
787	SPEC   	;
788	IDEN   	fclose
788	SPEC   	(
788	IDEN   	fout
788	SPEC   	)
788	SPEC   	;
789	IDEN   	free
789	SPEC   	(
789	IDEN   	fr
789	SPEC   	)
789	SPEC   	;
791	IDEN   	printf
791	SPEC   	(
791	STR    	The output is sucessful in %s
791	OPER   	,
791	IDEN   	DEFAULT_OUTPUT_FILENAME
791	SPEC   	)
791	SPEC   	;
792	REWD   	return
792	IDEN   	EXIT_SUCCESS
792	SPEC   	;
793	SPEC   	}
