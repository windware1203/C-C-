1-11	MC
12	REWD	int
12	IDEN	aaa
12	OPER	=
12	INTE	3
12	SPEC	;
15	PREP	#include <stdio.h>
16	PREP	#include <stdlib.h>
17	PREP	#include <stdbool.h>
18	PREP	#include <ctype.h>
19	PREP	#include <string.h>
22	PREP	#define DEFAULT_INPUT_FILENAME "scanner.c"
23	PREP	#define DEFAULT_OUTPUT_FILENAME "output.txt"
25	PREP	#define REWD_MAX_LEN 10
28	REWD	const
28	REWD	char
28	IDEN	rewds
28	OPER	[
28	OPER	]
28	OPER	[
28	IDEN	REWD_MAX_LEN
28	OPER	]
28	OPER	=
28	SPEC	{
28	SC	
29	STR	if
29	OPER	,
29	STR	do
29	OPER	,
29	STR	for
29	OPER	,
29	STR	int
29	OPER	,
29	STR	break
29	OPER	,
29	STR	default
29	OPER	,
29	STR	float
29	OPER	,
30	STR	double
30	OPER	,
30	STR	case
30	OPER	,
30	STR	else
30	OPER	,
30	STR	extern
30	OPER	,
30	STR	sizeof
30	OPER	,
30	STR	register
30	OPER	,
31	STR	while
31	OPER	,
31	STR	enum
31	OPER	,
31	STR	union
31	OPER	,
31	STR	goto
31	OPER	,
31	STR	auto
31	OPER	,
31	STR	char
31	OPER	,
31	STR	const
31	OPER	,
32	STR	static
32	OPER	,
32	STR	switch
32	OPER	,
32	STR	continue
32	OPER	,
32	STR	struct
32	OPER	,
32	STR	return
33	SPEC	}
33	SPEC	;
35	IDEN	typedef
35	REWD	struct
36	SPEC	{
37	IDEN	FILE
37	OPER	*
37	IDEN	fin
37	SPEC	;
38	REWD	int
38	IDEN	line_number
38	SPEC	;
39	SPEC	}
39	IDEN	FileReader
39	SPEC	;
41	IDEN	typedef
41	REWD	enum
42	SPEC	{
43	IDEN	IDEN
43	OPER	,
44	IDEN	REWD
44	OPER	,
45	IDEN	INTE
45	OPER	,
46	IDEN	FLOT
46	OPER	,
47	IDEN	CHAR
47	OPER	,
48	IDEN	STR
48	OPER	,
49	IDEN	OPER
49	OPER	,
50	IDEN	SPEC
50	OPER	,
51	IDEN	SC
51	OPER	,
52	IDEN	MC
52	OPER	,
53	IDEN	PREP
54	SPEC	}
54	IDEN	TokenType
54	SPEC	;
56	SC	
57	REWD	const
57	REWD	char
57	OPER	*
57	IDEN	token_type_to_string
57	SPEC	(
57	IDEN	TokenType
57	IDEN	type
57	SPEC	)
57	SPEC	;
58	IDEN	void
58	IDEN	report_token
58	SPEC	(
58	IDEN	FileReader
58	OPER	*
58	IDEN	fr
58	OPER	,
58	IDEN	FILE
58	OPER	*
58	IDEN	fout
58	OPER	,
58	IDEN	TokenType
58	IDEN	type
58	OPER	,
58	REWD	const
58	REWD	char
58	OPER	*
58	IDEN	token
58	SPEC	)
58	SPEC	;
59	IDEN	void
59	IDEN	scan_identifier
59	SPEC	(
59	IDEN	FileReader
59	OPER	*
59	IDEN	fr
59	OPER	,
59	IDEN	FILE
59	OPER	*
59	IDEN	fout
59	SPEC	)
59	SPEC	;
60	IDEN	bool
60	IDEN	scan_reserved
60	SPEC	(
60	IDEN	FileReader
60	OPER	*
60	IDEN	fr
60	OPER	,
60	IDEN	FILE
60	OPER	*
60	IDEN	fout
60	OPER	,
60	REWD	char
60	OPER	*
60	IDEN	buffer
60	SPEC	)
60	SPEC	;
61	IDEN	void
61	IDEN	scan_integer
61	SPEC	(
61	IDEN	FileReader
61	OPER	*
61	IDEN	fr
61	OPER	,
61	IDEN	FILE
61	OPER	*
61	IDEN	fout
61	SPEC	)
61	SPEC	;
62	IDEN	void
62	IDEN	scan_float
62	SPEC	(
62	IDEN	FileReader
62	OPER	*
62	IDEN	fr
62	OPER	,
62	IDEN	FILE
62	OPER	*
62	IDEN	fout
62	SPEC	)
62	SPEC	;
63	IDEN	void
63	IDEN	scan_character
63	SPEC	(
63	IDEN	FileReader
63	OPER	*
63	IDEN	fr
63	OPER	,
63	IDEN	FILE
63	OPER	*
63	IDEN	fout
63	SPEC	)
63	SPEC	;
64	IDEN	void
64	IDEN	scan_string
64	SPEC	(
64	IDEN	FileReader
64	OPER	*
64	IDEN	fr
64	OPER	,
64	IDEN	FILE
64	OPER	*
64	IDEN	fout
64	SPEC	)
64	SPEC	;
65	IDEN	void
65	IDEN	scan_operator
65	SPEC	(
65	IDEN	FileReader
65	OPER	*
65	IDEN	fr
65	OPER	,
65	IDEN	FILE
65	OPER	*
65	IDEN	fout
65	SPEC	)
65	SPEC	;
66	IDEN	void
66	IDEN	scan_special
66	SPEC	(
66	IDEN	FileReader
66	OPER	*
66	IDEN	fr
66	OPER	,
66	IDEN	FILE
66	OPER	*
66	IDEN	fout
66	SPEC	)
66	SPEC	;
67	IDEN	void
67	IDEN	scan_single_comment
67	SPEC	(
67	IDEN	FileReader
67	OPER	*
67	IDEN	fr
67	OPER	,
67	IDEN	FILE
67	OPER	*
67	IDEN	fout
67	SPEC	)
67	SPEC	;
68	IDEN	void
68	IDEN	scan_multi_comment
68	SPEC	(
68	IDEN	FileReader
68	OPER	*
68	IDEN	fr
68	OPER	,
68	IDEN	FILE
68	OPER	*
68	IDEN	fout
68	SPEC	)
68	SPEC	;
69	IDEN	void
69	IDEN	scan_preprocessor
69	SPEC	(
69	IDEN	FileReader
69	OPER	*
69	IDEN	fr
69	OPER	,
69	IDEN	FILE
69	OPER	*
69	IDEN	fout
69	SPEC	)
69	SPEC	;
71	REWD	int
72	IDEN	compare
72	SPEC	(
72	REWD	const
72	IDEN	void
72	OPER	*
72	IDEN	arg1
72	OPER	,
72	REWD	const
72	IDEN	void
72	OPER	*
72	IDEN	arg2
72	SPEC	)
72	SPEC	{
73	REWD	return
73	SPEC	(
73	OPER	*
73	SPEC	(
73	REWD	int
73	OPER	*
73	SPEC	)
73	IDEN	arg1
73	OPER	-
73	OPER	*
73	SPEC	(
73	REWD	int
73	OPER	*
73	SPEC	)
73	IDEN	arg2
73	SPEC	)
73	SPEC	;
74	SPEC	}
76	REWD	const
76	REWD	char
76	OPER	*
77	IDEN	token_type_to_string
77	SPEC	(
77	IDEN	TokenType
77	IDEN	type
77	SPEC	)
78	SPEC	{
79	REWD	switch
79	SPEC	(
79	IDEN	type
79	SPEC	)
80	SPEC	{
81	REWD	case
81	IDEN	IDEN
81	SPEC	:
82	REWD	return
82	STR	IDEN
82	SPEC	;
83	REWD	case
83	IDEN	REWD
83	SPEC	:
84	REWD	return
84	STR	REWD
84	SPEC	;
85	REWD	case
85	IDEN	INTE
85	SPEC	:
86	REWD	return
86	STR	INTE
86	SPEC	;
87	REWD	case
87	IDEN	FLOT
87	SPEC	:
88	REWD	return
88	STR	FLOT
88	SPEC	;
89	REWD	case
89	IDEN	CHAR
89	SPEC	:
90	REWD	return
90	STR	CHAR
90	SPEC	;
91	REWD	case
91	IDEN	STR
91	SPEC	:
92	REWD	return
92	STR	STR
92	SPEC	;
93	REWD	case
93	IDEN	OPER
93	SPEC	:
94	REWD	return
94	STR	OPER
94	SPEC	;
95	REWD	case
95	IDEN	SPEC
95	SPEC	:
96	REWD	return
96	STR	SPEC
96	SPEC	;
97	REWD	case
97	IDEN	SC
97	SPEC	:
98	REWD	return
98	STR	SC
98	SPEC	;
99	REWD	case
99	IDEN	MC
99	SPEC	:
100	REWD	return
100	STR	MC
100	SPEC	;
101	REWD	case
101	IDEN	PREP
101	SPEC	:
102	REWD	return
102	STR	PREP
102	SPEC	;
103	REWD	default
103	SPEC	:
104	REWD	return
104	STR	UNKNOWN
104	SPEC	;
105	SPEC	}
106	SPEC	}
108	IDEN	void
109	IDEN	report_token
109	SPEC	(
109	IDEN	FileReader
109	OPER	*
109	IDEN	fr
109	OPER	,
109	IDEN	FILE
109	OPER	*
109	IDEN	fout
109	OPER	,
109	IDEN	TokenType
109	IDEN	type
109	OPER	,
109	REWD	const
109	REWD	char
109	OPER	*
109	IDEN	token
109	SPEC	)
110	SPEC	{
111	IDEN	fprintf
111	SPEC	(
111	IDEN	fout
111	OPER	,
111	STR	%d\t%s\t%s\n
111	OPER	,
111	IDEN	fr
111	OPER	->
111	IDEN	line_number
111	OPER	,
111	IDEN	token_type_to_string
111	SPEC	(
111	IDEN	type
111	SPEC	)
111	OPER	,
111	IDEN	token
111	SPEC	)
111	SPEC	;
112	SPEC	}
114	IDEN	bool
115	IDEN	scan_reserved
115	SPEC	(
115	IDEN	FileReader
115	OPER	*
115	IDEN	fr
115	OPER	,
115	IDEN	FILE
115	OPER	*
115	IDEN	fout
115	OPER	,
115	REWD	char
115	OPER	*
115	IDEN	buffer
115	SPEC	)
116	SPEC	{
117	REWD	char
117	OPER	*
117	IDEN	ch
117	OPER	=
117	IDEN	bsearch
117	SPEC	(
117	IDEN	buffer
117	OPER	,
117	IDEN	rewds
117	OPER	,
117	INTE	25
117	OPER	,
117	IDEN	REWD_MAX_LEN
117	OPER	,
117	IDEN	compare
117	SPEC	)
117	SPEC	;
118	REWD	if
118	SPEC	(
118	IDEN	ch
118	OPER	!=
118	IDEN	NULL
118	SPEC	)
119	SPEC	{
120	IDEN	report_token
120	SPEC	(
120	IDEN	fr
120	OPER	,
120	IDEN	fout
120	OPER	,
120	IDEN	REWD
120	OPER	,
120	IDEN	buffer
120	SPEC	)
120	SPEC	;
121	REWD	return
121	IDEN	true
121	SPEC	;
122	SPEC	}
123	REWD	else
124	SPEC	{
125	REWD	return
125	IDEN	false
125	SPEC	;
126	SPEC	}
127	SPEC	}
130	IDEN	void
131	IDEN	scan_identifier
131	SPEC	(
131	IDEN	FileReader
131	OPER	*
131	IDEN	fr
131	OPER	,
131	IDEN	FILE
131	OPER	*
131	IDEN	fout
131	SPEC	)
132	SPEC	{
133	REWD	char
133	IDEN	c
133	OPER	=
133	IDEN	fgetc
133	SPEC	(
133	IDEN	fr
133	OPER	->
133	IDEN	fin
133	SPEC	)
133	SPEC	;
134	REWD	char
134	IDEN	buffer
134	OPER	[
134	INTE	256
134	OPER	]
134	SPEC	;
135	REWD	int
135	IDEN	index
135	OPER	=
135	INTE	0
135	SPEC	;
136	IDEN	buffer
136	OPER	[
136	IDEN	index
136	OPER	++
136	OPER	]
136	OPER	=
136	IDEN	c
136	SPEC	;
138	REWD	while
138	SPEC	(
138	SPEC	(
138	IDEN	c
138	OPER	=
138	IDEN	fgetc
138	SPEC	(
138	IDEN	fr
138	OPER	->
138	IDEN	fin
138	SPEC	)
138	SPEC	)
138	OPER	!=
138	IDEN	EOF
139	OPER	&&
139	SPEC	(
139	IDEN	isalpha
139	SPEC	(
139	IDEN	c
139	SPEC	)
139	OPER	||
139	IDEN	isdigit
139	SPEC	(
139	IDEN	c
139	SPEC	)
139	OPER	||
139	IDEN	c
139	OPER	==
139	CHAR	_
139	SPEC	)
139	SPEC	)
140	SPEC	{
141	IDEN	buffer
141	OPER	[
141	IDEN	index
141	OPER	++
141	OPER	]
141	OPER	=
141	IDEN	c
141	SPEC	;
142	SPEC	}
144	IDEN	buffer
144	OPER	[
144	IDEN	index
144	OPER	]
144	OPER	=
144	CHAR	\0
144	SPEC	;
146	IDEN	fseek
146	SPEC	(
146	IDEN	fr
146	OPER	->
146	IDEN	fin
146	OPER	,
146	OPER	,
146	IDEN	SEEK_CUR
146	SPEC	)
146	SPEC	;
147	REWD	if
147	SPEC	(
147	OPER	!
147	IDEN	scan_reserved
147	SPEC	(
147	IDEN	fr
147	OPER	,
147	IDEN	fout
147	OPER	,
147	IDEN	buffer
147	SPEC	)
147	SPEC	)
148	SPEC	{
149	IDEN	report_token
149	SPEC	(
149	IDEN	fr
149	OPER	,
149	IDEN	fout
149	OPER	,
149	IDEN	IDEN
149	OPER	,
149	IDEN	buffer
149	SPEC	)
149	SPEC	;
150	SPEC	}
151	SPEC	}
153	IDEN	void
154	IDEN	scan_integer
154	SPEC	(
154	IDEN	FileReader
154	OPER	*
154	IDEN	fr
154	OPER	,
154	IDEN	FILE
154	OPER	*
154	IDEN	fout
154	SPEC	)
155	SPEC	{
156	REWD	char
156	IDEN	c
156	OPER	=
156	IDEN	fgetc
156	SPEC	(
156	IDEN	fr
156	OPER	->
156	IDEN	fin
156	SPEC	)
156	SPEC	;
157	REWD	char
157	IDEN	buffer
157	OPER	[
157	INTE	256
157	OPER	]
157	SPEC	;
158	REWD	int
158	IDEN	index
158	OPER	=
158	INTE	0
158	SPEC	;
160	SC	
161	REWD	if
161	SPEC	(
161	IDEN	c
161	OPER	==
161	CHAR	+
161	OPER	||
161	IDEN	c
161	OPER	==
161	CHAR	-
161	SPEC	)
162	SPEC	{
163	IDEN	buffer
163	OPER	[
163	IDEN	index
163	OPER	++
163	OPER	]
163	OPER	=
163	IDEN	c
163	SPEC	;
164	IDEN	c
164	OPER	=
164	IDEN	fgetc
164	SPEC	(
164	IDEN	fr
164	OPER	->
164	IDEN	fin
164	SPEC	)
164	SPEC	;
165	SPEC	}
168	REWD	int
168	IDEN	cnt
168	OPER	=
168	INTE	1
168	SPEC	;
169	SC	
170	REWD	while
170	SPEC	(
170	IDEN	isdigit
170	SPEC	(
170	IDEN	c
170	SPEC	)
170	SPEC	)
171	SPEC	{
172	IDEN	buffer
172	OPER	[
172	IDEN	index
172	OPER	++
172	OPER	]
172	OPER	=
172	IDEN	c
172	SPEC	;
173	IDEN	c
173	OPER	=
173	IDEN	fgetc
173	SPEC	(
173	IDEN	fr
173	OPER	->
173	IDEN	fin
173	SPEC	)
173	SPEC	;
174	IDEN	cnt
174	OPER	++
174	SPEC	;
175	REWD	if
175	SPEC	(
175	IDEN	c
175	OPER	==
175	CHAR	.
175	SPEC	)
176	SPEC	{
177	IDEN	fseek
177	SPEC	(
177	IDEN	fr
177	OPER	->
177	IDEN	fin
177	OPER	,
177	INTE	0
177	OPER	-
177	IDEN	cnt
177	OPER	,
177	IDEN	SEEK_CUR
177	SPEC	)
177	SPEC	;
178	REWD	return
178	IDEN	scan_float
178	SPEC	(
178	IDEN	fr
178	OPER	,
178	IDEN	fout
178	SPEC	)
178	SPEC	;
179	SPEC	}
180	SPEC	}
181	IDEN	fseek
181	SPEC	(
181	IDEN	fr
181	OPER	->
181	IDEN	fin
181	OPER	,
181	OPER	,
181	IDEN	SEEK_CUR
181	SPEC	)
181	SPEC	;
183	SC	
184	REWD	if
184	SPEC	(
184	OPER	!
184	IDEN	isdigit
184	SPEC	(
184	IDEN	buffer
184	OPER	[
184	IDEN	index
184	OPER	-
184	INTE	1
184	OPER	]
184	SPEC	)
184	SPEC	)
185	SPEC	{
186	IDEN	fseek
186	SPEC	(
186	IDEN	fr
186	OPER	->
186	IDEN	fin
186	OPER	,
186	OPER	,
186	IDEN	SEEK_CUR
186	SPEC	)
186	SPEC	;
187	IDEN	index
187	OPER	--
187	SPEC	;
188	SPEC	}
190	IDEN	buffer
190	OPER	[
190	IDEN	index
190	OPER	]
190	OPER	=
190	CHAR	\0
190	SPEC	;
192	SC	
193	IDEN	report_token
193	SPEC	(
193	IDEN	fr
193	OPER	,
193	IDEN	fout
193	OPER	,
193	IDEN	INTE
193	OPER	,
193	IDEN	buffer
193	SPEC	)
193	SPEC	;
194	SPEC	}
196	IDEN	void
197	IDEN	scan_hexadecimal
197	SPEC	(
197	IDEN	FileReader
197	OPER	*
197	IDEN	fr
197	OPER	,
197	IDEN	FILE
197	OPER	*
197	IDEN	fout
197	SPEC	)
198	SPEC	{
199	REWD	char
199	IDEN	c
199	OPER	=
199	IDEN	fgetc
199	SPEC	(
199	IDEN	fr
199	OPER	->
199	IDEN	fin
199	SPEC	)
199	SPEC	;
200	REWD	char
200	IDEN	buffer
200	OPER	[
200	INTE	256
200	OPER	]
200	SPEC	;
201	REWD	int
201	IDEN	index
201	OPER	=
201	INTE	0
201	SPEC	;
202	IDEN	buffer
202	OPER	[
202	IDEN	index
202	OPER	++
202	OPER	]
202	OPER	=
202	IDEN	c
202	SPEC	;
204	REWD	while
204	SPEC	(
204	SPEC	(
204	IDEN	c
204	OPER	=
204	IDEN	fgetc
204	SPEC	(
204	IDEN	fr
204	OPER	->
204	IDEN	fin
204	SPEC	)
204	SPEC	)
204	OPER	!=
204	IDEN	EOF
204	OPER	&&
204	IDEN	isxdigit
204	SPEC	(
204	IDEN	c
204	SPEC	)
204	SPEC	)
205	SPEC	{
206	IDEN	buffer
206	OPER	[
206	IDEN	index
206	OPER	++
206	OPER	]
206	OPER	=
206	IDEN	c
206	SPEC	;
207	SPEC	}
209	IDEN	buffer
209	OPER	[
209	IDEN	index
209	OPER	]
209	OPER	=
209	CHAR	\0
209	SPEC	;
211	IDEN	fseek
211	SPEC	(
211	IDEN	fr
211	OPER	->
211	IDEN	fin
211	OPER	,
211	OPER	,
211	IDEN	SEEK_CUR
211	SPEC	)
211	SPEC	;
212	IDEN	report_token
212	SPEC	(
212	IDEN	fr
212	OPER	,
212	IDEN	fout
212	OPER	,
212	IDEN	INTE
212	OPER	,
212	IDEN	buffer
212	SPEC	)
212	SPEC	;
213	SPEC	}
215	IDEN	void
216	IDEN	scan_octal
216	SPEC	(
216	IDEN	FileReader
216	OPER	*
216	IDEN	fr
216	OPER	,
216	IDEN	FILE
216	OPER	*
216	IDEN	fout
216	SPEC	)
217	SPEC	{
218	REWD	char
218	IDEN	c
218	OPER	=
218	IDEN	fgetc
218	SPEC	(
218	IDEN	fr
218	OPER	->
218	IDEN	fin
218	SPEC	)
218	SPEC	;
219	REWD	char
219	IDEN	buffer
219	OPER	[
219	INTE	256
219	OPER	]
219	SPEC	;
220	REWD	int
220	IDEN	index
220	OPER	=
220	INTE	0
220	SPEC	;
221	IDEN	buffer
221	OPER	[
221	IDEN	index
221	OPER	++
221	OPER	]
221	OPER	=
221	IDEN	c
221	SPEC	;
223	REWD	while
223	SPEC	(
223	SPEC	(
223	IDEN	c
223	OPER	=
223	IDEN	fgetc
223	SPEC	(
223	IDEN	fr
223	OPER	->
223	IDEN	fin
223	SPEC	)
223	SPEC	)
223	OPER	!=
223	IDEN	EOF
223	OPER	&&
223	IDEN	c
223	OPER	>=
223	CHAR	0
223	OPER	&&
223	IDEN	c
223	OPER	<=
223	CHAR	7
223	SPEC	)
224	SPEC	{
225	IDEN	buffer
225	OPER	[
225	IDEN	index
225	OPER	++
225	OPER	]
225	OPER	=
225	IDEN	c
225	SPEC	;
226	SPEC	}
228	IDEN	buffer
228	OPER	[
228	IDEN	index
228	OPER	]
228	OPER	=
228	CHAR	\0
228	SPEC	;
230	IDEN	fseek
230	SPEC	(
230	IDEN	fr
230	OPER	->
230	IDEN	fin
230	OPER	,
230	OPER	,
230	IDEN	SEEK_CUR
230	SPEC	)
230	SPEC	;
231	IDEN	report_token
231	SPEC	(
231	IDEN	fr
231	OPER	,
231	IDEN	fout
231	OPER	,
231	IDEN	INTE
231	OPER	,
231	IDEN	buffer
231	SPEC	)
231	SPEC	;
232	SPEC	}
234	IDEN	void
235	IDEN	scan_float
235	SPEC	(
235	IDEN	FileReader
235	OPER	*
235	IDEN	fr
235	OPER	,
235	IDEN	FILE
235	OPER	*
235	IDEN	fout
235	SPEC	)
236	SPEC	{
237	REWD	char
237	IDEN	c
237	OPER	=
237	IDEN	fgetc
237	SPEC	(
237	IDEN	fr
237	OPER	->
237	IDEN	fin
237	SPEC	)
237	SPEC	;
238	REWD	char
238	IDEN	buffer
238	OPER	[
238	INTE	256
238	OPER	]
238	SPEC	;
239	REWD	int
239	IDEN	index
239	OPER	=
239	INTE	0
239	SPEC	;
241	SC	
242	REWD	if
242	SPEC	(
242	IDEN	c
242	OPER	==
242	CHAR	+
242	OPER	||
242	IDEN	c
242	OPER	==
242	CHAR	-
242	SPEC	)
243	SPEC	{
244	IDEN	buffer
244	OPER	[
244	IDEN	index
244	OPER	++
244	OPER	]
244	OPER	=
244	IDEN	c
244	SPEC	;
245	IDEN	c
245	OPER	=
245	IDEN	fgetc
245	SPEC	(
245	IDEN	fr
245	OPER	->
245	IDEN	fin
245	SPEC	)
245	SPEC	;
246	SPEC	}
248	SC	
249	REWD	while
249	SPEC	(
249	IDEN	isdigit
249	SPEC	(
249	IDEN	c
249	SPEC	)
249	SPEC	)
250	SPEC	{
251	IDEN	buffer
251	OPER	[
251	IDEN	index
251	OPER	++
251	OPER	]
251	OPER	=
251	IDEN	c
251	SPEC	;
252	IDEN	c
252	OPER	=
252	IDEN	fgetc
252	SPEC	(
252	IDEN	fr
252	OPER	->
252	IDEN	fin
252	SPEC	)
252	SPEC	;
253	SPEC	}
255	SC	
256	REWD	if
256	SPEC	(
256	IDEN	c
256	OPER	==
256	CHAR	.
256	SPEC	)
257	SPEC	{
258	IDEN	buffer
258	OPER	[
258	IDEN	index
258	OPER	++
258	OPER	]
258	OPER	=
258	IDEN	c
258	SPEC	;
259	IDEN	c
259	OPER	=
259	IDEN	fgetc
259	SPEC	(
259	IDEN	fr
259	OPER	->
259	IDEN	fin
259	SPEC	)
259	SPEC	;
261	SC	
262	REWD	while
262	SPEC	(
262	IDEN	isdigit
262	SPEC	(
262	IDEN	c
262	SPEC	)
262	SPEC	)
263	SPEC	{
264	IDEN	buffer
264	OPER	[
264	IDEN	index
264	OPER	++
264	OPER	]
264	OPER	=
264	IDEN	c
264	SPEC	;
265	IDEN	c
265	OPER	=
265	IDEN	fgetc
265	SPEC	(
265	IDEN	fr
265	OPER	->
265	IDEN	fin
265	SPEC	)
265	SPEC	;
266	SPEC	}
267	SPEC	}
268	REWD	else
269	SPEC	{
270	IDEN	fseek
270	SPEC	(
270	IDEN	fr
270	OPER	->
270	IDEN	fin
270	OPER	,
270	OPER	-
270	IDEN	index
270	OPER	,
270	IDEN	SEEK_CUR
270	SPEC	)
270	SPEC	;
271	REWD	return
271	SPEC	;
272	SPEC	}
274	SC	
275	REWD	switch
275	SPEC	(
275	IDEN	c
275	SPEC	)
276	SPEC	{
277	REWD	case
277	CHAR	e
277	SPEC	:
278	REWD	case
278	CHAR	E
278	SPEC	:
279	IDEN	buffer
279	OPER	[
279	IDEN	index
279	OPER	++
279	OPER	]
279	OPER	=
279	IDEN	c
279	SPEC	;
280	IDEN	c
280	OPER	=
280	IDEN	fgetc
280	SPEC	(
280	IDEN	fr
280	OPER	->
280	IDEN	fin
280	SPEC	)
280	SPEC	;
282	SC	
283	REWD	switch
283	SPEC	(
283	IDEN	c
283	SPEC	)
284	SPEC	{
285	REWD	case
285	CHAR	+
285	SPEC	:
286	REWD	case
286	CHAR	-
286	SPEC	:
287	IDEN	buffer
287	OPER	[
287	IDEN	index
287	OPER	++
287	OPER	]
287	OPER	=
287	IDEN	c
287	SPEC	;
288	IDEN	c
288	OPER	=
288	IDEN	fgetc
288	SPEC	(
288	IDEN	fr
288	OPER	->
288	IDEN	fin
288	SPEC	)
288	SPEC	;
289	REWD	if
289	SPEC	(
289	IDEN	isdigit
289	SPEC	(
289	IDEN	c
289	SPEC	)
289	SPEC	)
290	SPEC	{
291	IDEN	buffer
291	OPER	[
291	IDEN	index
291	OPER	++
291	OPER	]
291	OPER	=
291	IDEN	c
291	SPEC	;
292	IDEN	c
292	OPER	=
292	IDEN	fgetc
292	SPEC	(
292	IDEN	fr
292	OPER	->
292	IDEN	fin
292	SPEC	)
292	SPEC	;
293	SPEC	}
294	REWD	else
295	SPEC	{
296	IDEN	fseek
296	SPEC	(
296	IDEN	fr
296	OPER	->
296	IDEN	fin
296	OPER	,
296	OPER	,
296	IDEN	SEEK_CUR
296	SPEC	)
296	SPEC	;
297	SPEC	}
298	REWD	break
298	SPEC	;
299	REWD	default
299	SPEC	:
300	IDEN	fseek
300	SPEC	(
300	IDEN	fr
300	OPER	->
300	IDEN	fin
300	OPER	,
300	OPER	,
300	IDEN	SEEK_CUR
300	SPEC	)
300	SPEC	;
301	REWD	break
301	SPEC	;
302	SPEC	}
303	SC	
304	REWD	while
304	SPEC	(
304	IDEN	isdigit
304	SPEC	(
304	IDEN	c
304	SPEC	)
304	SPEC	)
305	SPEC	{
306	IDEN	buffer
306	OPER	[
306	IDEN	index
306	OPER	++
306	OPER	]
306	OPER	=
306	IDEN	c
306	SPEC	;
307	IDEN	c
307	OPER	=
307	IDEN	fgetc
307	SPEC	(
307	IDEN	fr
307	OPER	->
307	IDEN	fin
307	SPEC	)
307	SPEC	;
308	SPEC	}
309	REWD	break
309	SPEC	;
310	REWD	default
310	SPEC	:
311	IDEN	fseek
311	SPEC	(
311	IDEN	fr
311	OPER	->
311	IDEN	fin
311	OPER	,
311	OPER	,
311	IDEN	SEEK_CUR
311	SPEC	)
311	SPEC	;
312	REWD	break
312	SPEC	;
314	SPEC	}
316	SC	
317-321	MC
323	IDEN	buffer
323	OPER	[
323	IDEN	index
323	OPER	]
323	OPER	=
323	CHAR	\0
323	SPEC	;
325	SC	
326	IDEN	report_token
326	SPEC	(
326	IDEN	fr
326	OPER	,
326	IDEN	fout
326	OPER	,
326	IDEN	FLOT
326	OPER	,
326	IDEN	buffer
326	SPEC	)
326	SPEC	;
327	SPEC	}
330	IDEN	void
331	IDEN	scan_character
331	SPEC	(
331	IDEN	FileReader
331	OPER	*
331	IDEN	fr
331	OPER	,
331	IDEN	FILE
331	OPER	*
331	IDEN	fout
331	SPEC	)
332	SPEC	{
333	REWD	char
333	IDEN	c
333	SPEC	;
334	REWD	char
334	IDEN	buffer
334	OPER	[
334	INTE	256
334	OPER	]
334	SPEC	;
335	REWD	int
335	IDEN	index
335	OPER	=
335	INTE	0
335	SPEC	;
337	REWD	while
337	SPEC	(
337	SPEC	(
337	IDEN	c
337	OPER	=
337	IDEN	fgetc
337	SPEC	(
337	IDEN	fr
337	OPER	->
337	IDEN	fin
337	SPEC	)
337	SPEC	)
337	OPER	!=
337	IDEN	EOF
337	OPER	&&
337	IDEN	c
337	OPER	!=
337	CHAR	\
337	CHAR	) 
	{
        buffer[index++] = c;
    }

    if (c == 
Invalid operator at line 337
337	CHAR	
337	SPEC	)
338	SPEC	{
339	IDEN	buffer
339	OPER	[
339	IDEN	index
339	OPER	]
339	OPER	=
339	CHAR	\0
339	SPEC	;
340	IDEN	report_token
340	SPEC	(
340	IDEN	fr
340	OPER	,
340	IDEN	fout
340	OPER	,
340	IDEN	CHAR
340	OPER	,
340	IDEN	buffer
340	SPEC	)
340	SPEC	;
341	SPEC	}
342	REWD	else
343	SPEC	{
344	IDEN	fprintf
344	SPEC	(
344	IDEN	fout
344	OPER	,
344	STR	Invalid character constant at line %d\n
344	OPER	,
344	IDEN	fr
344	OPER	->
344	IDEN	line_number
344	SPEC	)
344	SPEC	;
345	SPEC	}
346	SPEC	}
348	IDEN	void
349	IDEN	scan_string
349	SPEC	(
349	IDEN	FileReader
349	OPER	*
349	IDEN	fr
349	OPER	,
349	IDEN	FILE
349	OPER	*
349	IDEN	fout
349	SPEC	)
350	SPEC	{
351	REWD	char
351	IDEN	c
351	SPEC	;
352	REWD	char
352	IDEN	buffer
352	OPER	[
352	INTE	256
352	OPER	]
352	SPEC	;
353	REWD	int
353	IDEN	index
353	OPER	=
353	INTE	0
353	SPEC	;
354	REWD	int
354	IDEN	line_start
354	OPER	=
354	IDEN	fr
354	OPER	->
354	IDEN	line_number
354	SPEC	;
356	REWD	while
356	SPEC	(
356	SPEC	(
356	IDEN	c
356	OPER	=
356	IDEN	fgetc
356	SPEC	(
356	IDEN	fr
356	OPER	->
356	IDEN	fin
356	SPEC	)
356	SPEC	)
356	OPER	!=
356	IDEN	EOF
356	SPEC	)
357	SPEC	{
358	REWD	if
358	SPEC	(
358	IDEN	c
358	OPER	==
358	CHAR	\"
358	SPEC	)
359	SPEC	{
360	IDEN	buffer
360	OPER	[
360	IDEN	index
360	OPER	]
360	OPER	=
360	CHAR	\0
360	SPEC	;
361	IDEN	report_token
361	SPEC	(
361	IDEN	fr
361	OPER	,
361	IDEN	fout
361	OPER	,
361	IDEN	STR
361	OPER	,
361	IDEN	buffer
361	SPEC	)
361	SPEC	;
362	REWD	return
362	SPEC	;
363	SPEC	}
364	REWD	else
364	REWD	if
364	SPEC	(
364	IDEN	c
364	OPER	==
364	CHAR	\n
364	SPEC	)
365	SPEC	{
366	IDEN	fprintf
366	SPEC	(
366	IDEN	fout
366	OPER	,
366	STR	%d \t STR\t%s \tERROR: missing \
Invalid operator at line 366
366	IDEN	n
366 	 STR	, line_start, buffer); 	ERROR: missing "
367	IDEN	fr
367	OPER	->
367	IDEN	line_number
367	OPER	++
367	SPEC	;
368	REWD	return
368	SPEC	;
369	SPEC	}
370	REWD	else
371	SPEC	{
372	IDEN	buffer
372	OPER	[
372	IDEN	index
372	OPER	++
372	OPER	]
372	OPER	=
372	IDEN	c
372	SPEC	;
373	SPEC	}
374	SPEC	}
376	IDEN	fprintf
376	SPEC	(
376	IDEN	fout
376	OPER	,
376	STR	%d\tSTR\t\t%s  ERROR: missing \
Invalid operator at line 376
376	IDEN	n
376 	 STR	, line_start, buffer); 	ERROR: missing "
377	SPEC	}
380	IDEN	void
381	IDEN	scan_preprocessor
381	SPEC	(
381	IDEN	FileReader
381	OPER	*
381	IDEN	fr
381	OPER	,
381	IDEN	FILE
381	OPER	*
381	IDEN	fout
381	SPEC	)
382	SPEC	{
383	REWD	char
383	IDEN	c
383	OPER	=
383	IDEN	fgetc
383	SPEC	(
383	IDEN	fr
383	OPER	->
383	IDEN	fin
383	SPEC	)
383	SPEC	;
384	REWD	char
384	IDEN	buffer
384	OPER	[
384	INTE	256
384	OPER	]
384	SPEC	;
385	REWD	int
385	IDEN	index
385	OPER	=
385	INTE	0
385	SPEC	;
386	IDEN	buffer
386	OPER	[
386	IDEN	index
386	OPER	++
386	OPER	]
386	OPER	=
386	IDEN	c
386	SPEC	;
388	SC	
389	REWD	while
389	SPEC	(
389	IDEN	c
389	OPER	!=
389	CHAR	\n
389	OPER	&&
389	IDEN	c
389	OPER	!=
389	IDEN	EOF
389	SPEC	)
390	SPEC	{
391	IDEN	c
391	OPER	=
391	IDEN	fgetc
391	SPEC	(
391	IDEN	fr
391	OPER	->
391	IDEN	fin
391	SPEC	)
391	SPEC	;
392	IDEN	buffer
392	OPER	[
392	IDEN	index
392	OPER	++
392	OPER	]
392	OPER	=
392	IDEN	c
392	SPEC	;
393	SPEC	}
394	IDEN	buffer
394	OPER	[
394	IDEN	index
394	OPER	-
394	INTE	1
394	OPER	]
394	OPER	=
394	CHAR	\0
394	SPEC	;
395	IDEN	fr
395	OPER	->
395	IDEN	line_number
395	OPER	++
395	SPEC	;
396	IDEN	report_token
396	SPEC	(
396	IDEN	fr
396	OPER	,
396	IDEN	fout
396	OPER	,
396	IDEN	PREP
396	OPER	,
396	IDEN	buffer
396	SPEC	)
396	SPEC	;
397	SPEC	}
399	IDEN	void
400	IDEN	scan_operator
400	SPEC	(
400	IDEN	FileReader
400	OPER	*
400	IDEN	fr
400	OPER	,
400	IDEN	FILE
400	OPER	*
400	IDEN	fout
400	SPEC	)
401	SPEC	{
402	REWD	char
402	IDEN	c
402	OPER	=
402	IDEN	fgetc
402	SPEC	(
402	IDEN	fr
402	OPER	->
402	IDEN	fin
402	SPEC	)
402	SPEC	;
403	REWD	char
403	IDEN	ch
403	SPEC	;
404	REWD	char
404	IDEN	buffer
404	OPER	[
404	INTE	3
404	OPER	]
404	SPEC	;
405	IDEN	buffer
405	OPER	[
405	INTE	0
405	OPER	]
405	OPER	=
405	IDEN	c
405	SPEC	;
406	IDEN	buffer
406	OPER	[
406	INTE	1
406	OPER	]
406	OPER	=
406	CHAR	\0
406	SPEC	;
408	REWD	switch
408	SPEC	(
408	IDEN	c
408	SPEC	)
409	SPEC	{
410	REWD	case
410	CHAR	+
410	SPEC	:
410	SC	
411	IDEN	ch
411	OPER	=
411	IDEN	fgetc
411	SPEC	(
411	IDEN	fr
411	OPER	->
411	IDEN	fin
411	SPEC	)
411	SPEC	;
412	REWD	switch
412	SPEC	(
412	IDEN	ch
412	SPEC	)
413	SPEC	{
414	REWD	case
414	CHAR	+
414	SPEC	:
415	IDEN	buffer
415	OPER	[
415	INTE	1
415	OPER	]
415	OPER	=
415	CHAR	+
415	SPEC	;
416	IDEN	buffer
416	OPER	[
416	INTE	2
416	OPER	]
416	OPER	=
416	CHAR	\0
416	SPEC	;
417	REWD	break
417	SPEC	;
418	REWD	case
418	CHAR	=
418	SPEC	:
419	IDEN	buffer
419	OPER	[
419	INTE	1
419	OPER	]
419	OPER	=
419	CHAR	=
419	SPEC	;
420	IDEN	buffer
420	OPER	[
420	INTE	2
420	OPER	]
420	OPER	=
420	CHAR	\0
420	SPEC	;
421	REWD	break
421	SPEC	;
422	REWD	default
422	SPEC	:
423	IDEN	fseek
423	SPEC	(
423	IDEN	fr
423	OPER	->
423	IDEN	fin
423	OPER	,
423	OPER	,
423	IDEN	SEEK_CUR
423	SPEC	)
423	SPEC	;
424	REWD	break
424	SPEC	;
425	SPEC	}
427	REWD	case
427	CHAR	-
427	SPEC	:
427	SC	
428	IDEN	ch
428	OPER	=
428	IDEN	fgetc
428	SPEC	(
428	IDEN	fr
428	OPER	->
428	IDEN	fin
428	SPEC	)
428	SPEC	;
429	REWD	switch
429	SPEC	(
429	IDEN	ch
429	SPEC	)
430	SPEC	{
431	REWD	case
431	CHAR	-
431	SPEC	:
432	IDEN	buffer
432	OPER	[
432	INTE	1
432	OPER	]
432	OPER	=
432	CHAR	-
432	SPEC	;
433	IDEN	buffer
433	OPER	[
433	INTE	2
433	OPER	]
433	OPER	=
433	CHAR	\0
433	SPEC	;
434	REWD	break
434	SPEC	;
435	REWD	case
435	CHAR	=
435	SPEC	:
436	IDEN	buffer
436	OPER	[
436	INTE	1
436	OPER	]
436	OPER	=
436	CHAR	=
436	SPEC	;
437	IDEN	buffer
437	OPER	[
437	INTE	2
437	OPER	]
437	OPER	=
437	CHAR	\0
437	SPEC	;
438	REWD	break
438	SPEC	;
439	REWD	case
439	CHAR	>
439	SPEC	:
440	IDEN	buffer
440	OPER	[
440	INTE	1
440	OPER	]
440	OPER	=
440	CHAR	>
440	SPEC	;
441	IDEN	buffer
441	OPER	[
441	INTE	2
441	OPER	]
441	OPER	=
441	CHAR	\0
441	SPEC	;
442	REWD	break
442	SPEC	;
443	REWD	default
443	SPEC	:
444	IDEN	fseek
444	SPEC	(
444	IDEN	fr
444	OPER	->
444	IDEN	fin
444	OPER	,
444	OPER	,
444	IDEN	SEEK_CUR
444	SPEC	)
444	SPEC	;
445	REWD	break
445	SPEC	;
446	SPEC	}
447	REWD	case
447	CHAR	*
447	SPEC	:
447	SC	
448	IDEN	ch
448	OPER	=
448	IDEN	fgetc
448	SPEC	(
448	IDEN	fr
448	OPER	->
448	IDEN	fin
448	SPEC	)
448	SPEC	;
449	REWD	switch
449	SPEC	(
449	IDEN	ch
449	SPEC	)
450	SPEC	{
451	REWD	case
451	CHAR	*
451	SPEC	:
452	IDEN	buffer
452	OPER	[
452	INTE	1
452	OPER	]
452	OPER	=
452	CHAR	*
452	SPEC	;
453	IDEN	buffer
453	OPER	[
453	INTE	2
453	OPER	]
453	OPER	=
453	CHAR	\0
453	SPEC	;
454	REWD	break
454	SPEC	;
455	REWD	default
455	SPEC	:
456	IDEN	fseek
456	SPEC	(
456	IDEN	fr
456	OPER	->
456	IDEN	fin
456	OPER	,
456	OPER	,
456	IDEN	SEEK_CUR
456	SPEC	)
456	SPEC	;
457	REWD	break
457	SPEC	;
458	SPEC	}
459	REWD	case
459	CHAR	/
459	SPEC	:
459	SC	
460	IDEN	ch
460	OPER	=
460	IDEN	fgetc
460	SPEC	(
460	IDEN	fr
460	OPER	->
460	IDEN	fin
460	SPEC	)
460	SPEC	;
461	REWD	switch
461	SPEC	(
461	IDEN	ch
461	SPEC	)
462	SPEC	{
463	REWD	case
463	CHAR	=
463	SPEC	:
464	IDEN	buffer
464	OPER	[
464	INTE	1
464	OPER	]
464	OPER	=
464	CHAR	=
464	SPEC	;
465	IDEN	buffer
465	OPER	[
465	INTE	2
465	OPER	]
465	OPER	=
465	CHAR	\0
465	SPEC	;
466	REWD	break
466	SPEC	;
467	REWD	default
467	SPEC	:
468	IDEN	fseek
468	SPEC	(
468	IDEN	fr
468	OPER	->
468	IDEN	fin
468	OPER	,
468	OPER	,
468	IDEN	SEEK_CUR
468	SPEC	)
468	SPEC	;
469	REWD	break
469	SPEC	;
470	SPEC	}
471	REWD	case
471	CHAR	%
471	SPEC	:
471	SC	
472	IDEN	ch
472	OPER	=
472	IDEN	fgetc
472	SPEC	(
472	IDEN	fr
472	OPER	->
472	IDEN	fin
472	SPEC	)
472	SPEC	;
473	REWD	switch
473	SPEC	(
473	IDEN	ch
473	SPEC	)
474	SPEC	{
475	REWD	case
475	CHAR	=
475	SPEC	:
476	IDEN	buffer
476	OPER	[
476	INTE	1
476	OPER	]
476	OPER	=
476	CHAR	=
476	SPEC	;
477	IDEN	buffer
477	OPER	[
477	INTE	2
477	OPER	]
477	OPER	=
477	CHAR	\0
477	SPEC	;
478	REWD	break
478	SPEC	;
479	REWD	default
479	SPEC	:
480	IDEN	fseek
480	SPEC	(
480	IDEN	fr
480	OPER	->
480	IDEN	fin
480	OPER	,
480	OPER	,
480	IDEN	SEEK_CUR
480	SPEC	)
480	SPEC	;
481	REWD	break
481	SPEC	;
482	SPEC	}
483	REWD	case
483	CHAR	=
483	SPEC	:
483	SC	
484	IDEN	ch
484	OPER	=
484	IDEN	fgetc
484	SPEC	(
484	IDEN	fr
484	OPER	->
484	IDEN	fin
484	SPEC	)
484	SPEC	;
485	REWD	switch
485	SPEC	(
485	IDEN	ch
485	SPEC	)
486	SPEC	{
487	REWD	case
487	CHAR	=
487	SPEC	:
488	IDEN	buffer
488	OPER	[
488	INTE	1
488	OPER	]
488	OPER	=
488	CHAR	=
488	SPEC	;
489	IDEN	buffer
489	OPER	[
489	INTE	2
489	OPER	]
489	OPER	=
489	CHAR	\0
489	SPEC	;
490	REWD	break
490	SPEC	;
491	REWD	default
491	SPEC	:
492	IDEN	fseek
492	SPEC	(
492	IDEN	fr
492	OPER	->
492	IDEN	fin
492	OPER	,
492	OPER	,
492	IDEN	SEEK_CUR
492	SPEC	)
492	SPEC	;
493	REWD	break
493	SPEC	;
494	SPEC	}
495	REWD	case
495	CHAR	,
495	SPEC	:
496	REWD	case
496	CHAR	>
496	SPEC	:
496	SC	
497	IDEN	ch
497	OPER	=
497	IDEN	fgetc
497	SPEC	(
497	IDEN	fr
497	OPER	->
497	IDEN	fin
497	SPEC	)
497	SPEC	;
498	REWD	switch
498	SPEC	(
498	IDEN	ch
498	SPEC	)
499	SPEC	{
500	REWD	case
500	CHAR	>
500	SPEC	:
501	IDEN	buffer
501	OPER	[
501	INTE	1
501	OPER	]
501	OPER	=
501	CHAR	>
501	SPEC	;
502	IDEN	buffer
502	OPER	[
502	INTE	2
502	OPER	]
502	OPER	=
502	CHAR	\0
502	SPEC	;
503	REWD	break
503	SPEC	;
504	REWD	case
504	CHAR	=
504	SPEC	:
505	IDEN	buffer
505	OPER	[
505	INTE	1
505	OPER	]
505	OPER	=
505	CHAR	=
505	SPEC	;
506	IDEN	buffer
506	OPER	[
506	INTE	2
506	OPER	]
506	OPER	=
506	CHAR	\0
506	SPEC	;
507	REWD	break
507	SPEC	;
508	REWD	default
508	SPEC	:
509	IDEN	fseek
509	SPEC	(
509	IDEN	fr
509	OPER	->
509	IDEN	fin
509	OPER	,
509	OPER	,
509	IDEN	SEEK_CUR
509	SPEC	)
509	SPEC	;
510	REWD	break
510	SPEC	;
511	SPEC	}
512	REWD	case
512	CHAR	<
512	SPEC	:
512	SC	
513	IDEN	ch
513	OPER	=
513	IDEN	fgetc
513	SPEC	(
513	IDEN	fr
513	OPER	->
513	IDEN	fin
513	SPEC	)
513	SPEC	;
514	REWD	switch
514	SPEC	(
514	IDEN	ch
514	SPEC	)
515	SPEC	{
516	REWD	case
516	CHAR	<
516	SPEC	:
517	IDEN	buffer
517	OPER	[
517	INTE	1
517	OPER	]
517	OPER	=
517	CHAR	<
517	SPEC	;
518	IDEN	buffer
518	OPER	[
518	INTE	2
518	OPER	]
518	OPER	=
518	CHAR	\0
518	SPEC	;
519	REWD	break
519	SPEC	;
520	REWD	case
520	CHAR	=
520	SPEC	:
521	IDEN	buffer
521	OPER	[
521	INTE	1
521	OPER	]
521	OPER	=
521	CHAR	=
521	SPEC	;
522	IDEN	buffer
522	OPER	[
522	INTE	2
522	OPER	]
522	OPER	=
522	CHAR	\0
522	SPEC	;
523	REWD	break
523	SPEC	;
524	REWD	default
524	SPEC	:
525	IDEN	fseek
525	SPEC	(
525	IDEN	fr
525	OPER	->
525	IDEN	fin
525	OPER	,
525	OPER	,
525	IDEN	SEEK_CUR
525	SPEC	)
525	SPEC	;
526	REWD	break
526	SPEC	;
527	SPEC	}
528	REWD	case
528	CHAR	!
528	SPEC	:
528	SC	
529	IDEN	ch
529	OPER	=
529	IDEN	fgetc
529	SPEC	(
529	IDEN	fr
529	OPER	->
529	IDEN	fin
529	SPEC	)
529	SPEC	;
530	REWD	switch
530	SPEC	(
530	IDEN	ch
530	SPEC	)
531	SPEC	{
532	REWD	case
532	CHAR	=
532	SPEC	:
533	IDEN	buffer
533	OPER	[
533	INTE	1
533	OPER	]
533	OPER	=
533	CHAR	=
533	SPEC	;
534	IDEN	buffer
534	OPER	[
534	INTE	2
534	OPER	]
534	OPER	=
534	CHAR	\0
534	SPEC	;
535	REWD	break
535	SPEC	;
536	REWD	default
536	SPEC	:
537	IDEN	fseek
537	SPEC	(
537	IDEN	fr
537	OPER	->
537	IDEN	fin
537	OPER	,
537	OPER	,
537	IDEN	SEEK_CUR
537	SPEC	)
537	SPEC	;
538	REWD	break
538	SPEC	;
539	SPEC	}
540	REWD	case
540	CHAR	&
540	SPEC	:
540	SC	
541	IDEN	ch
541	OPER	=
541	IDEN	fgetc
541	SPEC	(
541	IDEN	fr
541	OPER	->
541	IDEN	fin
541	SPEC	)
541	SPEC	;
542	REWD	switch
542	SPEC	(
542	IDEN	ch
542	SPEC	)
543	SPEC	{
544	REWD	case
544	CHAR	&
544	SPEC	:
545	IDEN	buffer
545	OPER	[
545	INTE	1
545	OPER	]
545	OPER	=
545	CHAR	&
545	SPEC	;
546	IDEN	buffer
546	OPER	[
546	INTE	2
546	OPER	]
546	OPER	=
546	CHAR	\0
546	SPEC	;
547	REWD	break
547	SPEC	;
548	REWD	default
548	SPEC	:
549	IDEN	fseek
549	SPEC	(
549	IDEN	fr
549	OPER	->
549	IDEN	fin
549	OPER	,
549	OPER	,
549	IDEN	SEEK_CUR
549	SPEC	)
549	SPEC	;
550	REWD	break
550	SPEC	;
551	SPEC	}
552	REWD	case
552	CHAR	|
552	SPEC	:
552	SC	
553	IDEN	ch
553	OPER	=
553	IDEN	fgetc
553	SPEC	(
553	IDEN	fr
553	OPER	->
553	IDEN	fin
553	SPEC	)
553	SPEC	;
554	REWD	switch
554	SPEC	(
554	IDEN	ch
554	SPEC	)
555	SPEC	{
556	REWD	case
556	CHAR	|
556	SPEC	:
557	IDEN	buffer
557	OPER	[
557	INTE	1
557	OPER	]
557	OPER	=
557	CHAR	|
557	SPEC	;
558	IDEN	buffer
558	OPER	[
558	INTE	2
558	OPER	]
558	OPER	=
558	CHAR	\0
558	SPEC	;
559	REWD	break
559	SPEC	;
560	REWD	break
560	SPEC	;
561	REWD	default
561	SPEC	:
562	IDEN	fseek
562	SPEC	(
562	IDEN	fr
562	OPER	->
562	IDEN	fin
562	OPER	,
562	OPER	,
562	IDEN	SEEK_CUR
562	SPEC	)
562	SPEC	;
563	REWD	break
563	SPEC	;
564	SPEC	}
565	REWD	case
565	CHAR	^
565	SPEC	:
566	REWD	case
566	CHAR	[
566	SPEC	:
567	REWD	case
567	CHAR	]
567	SPEC	:
568	REWD	case
568	CHAR	.
568	SPEC	:
569	IDEN	report_token
569	SPEC	(
569	IDEN	fr
569	OPER	,
569	IDEN	fout
569	OPER	,
569	IDEN	OPER
569	OPER	,
569	IDEN	buffer
569	SPEC	)
569	SPEC	;
570	REWD	break
570	SPEC	;
571	REWD	case
571	CHAR	(
571	SPEC	:
572	REWD	case
572	CHAR	)
572	SPEC	:
573	REWD	case
573	CHAR	{
573	SPEC	:
574	REWD	case
574	CHAR	}
574	SPEC	:
575	REWD	case
575	CHAR	;
575	SPEC	:
576	REWD	case
576	CHAR	?
576	SPEC	:
577	REWD	case
577	CHAR	:
577	SPEC	:
578	IDEN	report_token
578	SPEC	(
578	IDEN	fr
578	OPER	,
578	IDEN	fout
578	OPER	,
578	IDEN	SPEC
578	OPER	,
578	IDEN	buffer
578	SPEC	)
578	SPEC	;
579	REWD	break
579	SPEC	;
580	REWD	default
580	SPEC	:
581	IDEN	fprintf
581	SPEC	(
581	IDEN	fout
581	OPER	,
581	STR	Invalid operator at line %d\n
581	OPER	,
581	IDEN	fr
581	OPER	->
581	IDEN	line_number
581	SPEC	)
581	SPEC	;
582	SPEC	}
583	SPEC	}
585	IDEN	void
586	IDEN	scan_single_comment
586	SPEC	(
586	IDEN	FileReader
586	OPER	*
586	IDEN	fr
586	OPER	,
586	IDEN	FILE
586	OPER	*
586	IDEN	fout
586	SPEC	)
587	SPEC	{
588	REWD	char
588	IDEN	c
588	SPEC	;
590	REWD	while
590	SPEC	(
590	SPEC	(
590	IDEN	c
590	OPER	=
590	IDEN	fgetc
590	SPEC	(
590	IDEN	fr
590	OPER	->
590	IDEN	fin
590	SPEC	)
590	SPEC	)
590	OPER	!=
590	IDEN	EOF
590	OPER	&&
590	IDEN	c
590	OPER	!=
590	CHAR	\n
590	SPEC	)
591	SPEC	{
592	SC	
593	SPEC	}
594	IDEN	report_token
594	SPEC	(
594	IDEN	fr
594	OPER	,
594	IDEN	fout
594	OPER	,
594	IDEN	SC
594	OPER	,
594	STR	
594	SPEC	)
594	SPEC	;
595	IDEN	fr
595	OPER	->
595	IDEN	line_number
595	OPER	++
595	SPEC	;
596	SPEC	}
598	IDEN	void
599	IDEN	scan_multi_comment
599	SPEC	(
599	IDEN	FileReader
599	OPER	*
599	IDEN	fr
599	OPER	,
599	IDEN	FILE
599	OPER	*
599	IDEN	fout
599	SPEC	)
600	SPEC	{
601	REWD	char
601	IDEN	c
601	SPEC	;
602	REWD	int
602	IDEN	comment_start_line
602	OPER	=
602	IDEN	fr
602	OPER	->
602	IDEN	line_number
602	SPEC	;
603	REWD	while
603	SPEC	(
603	SPEC	(
603	IDEN	c
603	OPER	=
603	IDEN	fgetc
603	SPEC	(
603	IDEN	fr
603	OPER	->
603	IDEN	fin
603	SPEC	)
603	SPEC	)
603	OPER	!=
603	IDEN	EOF
603	SPEC	)
604	SPEC	{
605	REWD	if
605	SPEC	(
605	IDEN	c
605	OPER	==
605	CHAR	*
605	SPEC	)
606	SPEC	{
607	REWD	if
607	SPEC	(
607	SPEC	(
607	IDEN	c
607	OPER	=
607	IDEN	fgetc
607	SPEC	(
607	IDEN	fr
607	OPER	->
607	IDEN	fin
607	SPEC	)
607	SPEC	)
607	OPER	==
607	CHAR	/
607	SPEC	)
608	SPEC	{
609	IDEN	fprintf
609	SPEC	(
609	IDEN	fout
609	OPER	,
609	STR	%d-%d\t%s\n
609	OPER	,
610	IDEN	comment_start_line
610	OPER	,
611	IDEN	fr
611	OPER	->
611	IDEN	line_number
611	OPER	,
612	IDEN	token_type_to_string
612	SPEC	(
612	IDEN	MC
612	SPEC	)
612	SPEC	)
612	SPEC	;
613	REWD	return
613	SPEC	;
614	SPEC	}
615	REWD	else
616	SPEC	{
617	IDEN	fseek
617	SPEC	(
617	IDEN	fr
617	OPER	->
617	IDEN	fin
617	OPER	,
617	OPER	,
617	IDEN	SEEK_CUR
617	SPEC	)
617	SPEC	;
618	SPEC	}
619	SPEC	}
620	REWD	else
620	REWD	if
620	SPEC	(
620	IDEN	c
620	OPER	==
620	CHAR	\n
620	SPEC	)
621	SPEC	{
622	IDEN	fr
622	OPER	->
622	IDEN	line_number
622	OPER	++
622	SPEC	;
623	SPEC	}
625	SPEC	}
626	IDEN	fprintf
626	SPEC	(
626	IDEN	fout
626	OPER	,
626	STR	%d-%d\t%s\t\tERROR: missing */\n
626	OPER	,
626	IDEN	comment_start_line
626	OPER	,
626	IDEN	fr
626	OPER	->
626	IDEN	line_number
626	OPER	,
626	IDEN	token_type_to_string
626	SPEC	(
626	IDEN	MC
626	SPEC	)
626	SPEC	)
626	SPEC	;
627	SPEC	}
629	IDEN	void
630	IDEN	scan_tokens
630	SPEC	(
630	IDEN	FileReader
630	OPER	*
630	IDEN	fr
630	OPER	,
630	IDEN	FILE
630	OPER	*
630	IDEN	fout
630	SPEC	)
631	SPEC	{
632	REWD	char
632	IDEN	c
632	SPEC	;
634	REWD	while
634	SPEC	(
634	SPEC	(
634	IDEN	c
634	OPER	=
634	IDEN	fgetc
634	SPEC	(
634	IDEN	fr
634	OPER	->
634	IDEN	fin
634	SPEC	)
634	SPEC	)
634	OPER	!=
634	IDEN	EOF
634	SPEC	)
635	SPEC	{
636	REWD	if
636	SPEC	(
636	IDEN	isspace
636	SPEC	(
636	IDEN	c
636	SPEC	)
636	SPEC	)
637	SPEC	{
638	REWD	if
638	SPEC	(
638	IDEN	c
638	OPER	==
638	CHAR	\n
638	SPEC	)
639	SPEC	{
640	IDEN	fr
640	OPER	->
640	IDEN	line_number
640	OPER	++
640	SPEC	;
641	SPEC	}
642	SPEC	}
643	REWD	else
643	REWD	if
643	SPEC	(
643	IDEN	isalpha
643	SPEC	(
643	IDEN	c
643	SPEC	)
643	OPER	||
643	IDEN	c
643	OPER	==
643	CHAR	_
643	SPEC	)
644	SPEC	{
645	IDEN	fseek
645	SPEC	(
645	IDEN	fr
645	OPER	->
645	IDEN	fin
645	OPER	,
645	OPER	,
645	IDEN	SEEK_CUR
645	SPEC	)
645	SPEC	;
646	IDEN	scan_identifier
646	SPEC	(
646	IDEN	fr
646	OPER	,
646	IDEN	fout
646	SPEC	)
646	SPEC	;
647	SPEC	}
648	REWD	else
648	REWD	if
648	SPEC	(
648	IDEN	isdigit
648	SPEC	(
648	IDEN	c
648	SPEC	)
648	SPEC	)
649	SPEC	{
650	IDEN	fseek
650	SPEC	(
650	IDEN	fr
650	OPER	->
650	IDEN	fin
650	OPER	,
650	OPER	,
650	IDEN	SEEK_CUR
650	SPEC	)
650	SPEC	;
651	REWD	if
651	SPEC	(
651	IDEN	c
651	OPER	==
651	CHAR	0
651	SPEC	)
652	SPEC	{
653	SC	
654	REWD	char
654	IDEN	nextChar
654	OPER	=
654	IDEN	fgetc
654	SPEC	(
654	IDEN	fr
654	OPER	->
654	IDEN	fin
654	SPEC	)
654	SPEC	;
655	REWD	if
655	SPEC	(
655	IDEN	nextChar
655	OPER	==
655	CHAR	x
655	OPER	||
655	IDEN	nextChar
655	OPER	==
655	CHAR	X
655	SPEC	)
656	SPEC	{
657	SC	
658	IDEN	fseek
658	SPEC	(
658	IDEN	fr
658	OPER	->
658	IDEN	fin
658	OPER	,
658	OPER	,
658	IDEN	SEEK_CUR
658	SPEC	)
658	SPEC	;
659	IDEN	scan_hexadecimal
659	SPEC	(
659	IDEN	fr
659	OPER	,
659	IDEN	fout
659	SPEC	)
659	SPEC	;
660	SPEC	}
661	REWD	else
662	SPEC	{
663	SC	
664	IDEN	fseek
664	SPEC	(
664	IDEN	fr
664	OPER	->
664	IDEN	fin
664	OPER	,
664	OPER	,
664	IDEN	SEEK_CUR
664	SPEC	)
664	SPEC	;
665	IDEN	scan_octal
665	SPEC	(
665	IDEN	fr
665	OPER	,
665	IDEN	fout
665	SPEC	)
665	SPEC	;
666	SPEC	}
667	SPEC	}
668	REWD	else
669	SPEC	{
670	IDEN	scan_integer
670	SPEC	(
670	IDEN	fr
670	OPER	,
670	IDEN	fout
670	SPEC	)
670	SPEC	;
671	SPEC	}
672	SPEC	}
673	REWD	else
673	REWD	if
673	SPEC	(
673	IDEN	c
673	OPER	==
673	CHAR	\
673	CHAR	)
        {
            scan_character(fr, fout);
        }
        else if (c == 
Invalid operator at line 673
673 	 STR	') 	ERROR: missing "
674	SPEC	{
675	IDEN	scan_string
675	SPEC	(
675	IDEN	fr
675	OPER	,
675	IDEN	fout
675	SPEC	)
675	SPEC	;
676	SPEC	}
677	REWD	else
677	REWD	if
677	SPEC	(
677	IDEN	c
677	OPER	==
677	CHAR	/
677	SPEC	)
678	SPEC	{
679	IDEN	c
679	OPER	=
679	IDEN	fgetc
679	SPEC	(
679	IDEN	fr
679	OPER	->
679	IDEN	fin
679	SPEC	)
679	SPEC	;
680	REWD	if
680	SPEC	(
680	IDEN	c
680	OPER	==
680	CHAR	/
680	SPEC	)
681	SPEC	{
682	IDEN	scan_single_comment
682	SPEC	(
682	IDEN	fr
682	OPER	,
682	IDEN	fout
682	SPEC	)
682	SPEC	;
683	SPEC	}
684	REWD	else
684	REWD	if
684	SPEC	(
684	IDEN	c
684	OPER	==
684	CHAR	*
684	SPEC	)
685	SPEC	{
686	IDEN	scan_multi_comment
686	SPEC	(
686	IDEN	fr
686	OPER	,
686	IDEN	fout
686	SPEC	)
686	SPEC	;
687	SPEC	}
688	REWD	else
689	SPEC	{
690	IDEN	fseek
690	SPEC	(
690	IDEN	fr
690	OPER	->
690	IDEN	fin
690	OPER	,
690	OPER	,
690	IDEN	SEEK_CUR
690	SPEC	)
690	SPEC	;
691	IDEN	scan_operator
691	SPEC	(
691	IDEN	fr
691	OPER	,
691	IDEN	fout
691	SPEC	)
691	SPEC	;
692	SPEC	}
693	SPEC	}
694	REWD	else
694	REWD	if
694	SPEC	(
694	IDEN	c
694	OPER	==
694	CHAR	.
694	SPEC	)
695	SPEC	{
696	IDEN	fseek
696	SPEC	(
696	IDEN	fr
696	OPER	->
696	IDEN	fin
696	OPER	,
696	OPER	,
696	IDEN	SEEK_CUR
696	SPEC	)
696	SPEC	;
697	IDEN	scan_float
697	SPEC	(
697	IDEN	fr
697	OPER	,
697	IDEN	fout
697	SPEC	)
697	SPEC	;
698	SPEC	}
699	REWD	else
699	REWD	if
699	SPEC	(
699	IDEN	c
699	OPER	==
699	CHAR	#
699	SPEC	)
700	SPEC	{
701	IDEN	fseek
701	SPEC	(
701	IDEN	fr
701	OPER	->
701	IDEN	fin
701	OPER	,
701	OPER	,
701	IDEN	SEEK_CUR
701	SPEC	)
701	SPEC	;
702	IDEN	scan_preprocessor
702	SPEC	(
702	IDEN	fr
702	OPER	,
702	IDEN	fout
702	SPEC	)
702	SPEC	;
703	SPEC	}
704	REWD	else
704	REWD	if
704	SPEC	(
704	IDEN	c
704	OPER	==
704	CHAR	+
704	OPER	||
704	IDEN	c
704	OPER	==
704	CHAR	-
704	OPER	||
704	IDEN	c
704	OPER	==
704	CHAR	.
704	SPEC	)
705	SPEC	{
706	REWD	char
706	IDEN	nextChar
706	OPER	=
706	IDEN	fgetc
706	SPEC	(
706	IDEN	fr
706	OPER	->
706	IDEN	fin
706	SPEC	)
706	SPEC	;
707	REWD	if
707	SPEC	(
707	IDEN	isdigit
707	SPEC	(
707	IDEN	nextChar
707	SPEC	)
707	SPEC	)
708	SPEC	{
709	IDEN	fseek
709	SPEC	(
709	IDEN	fr
709	OPER	->
709	IDEN	fin
709	OPER	,
709	OPER	,
709	IDEN	SEEK_CUR
709	SPEC	)
709	SPEC	;
710	IDEN	scan_float
710	SPEC	(
710	IDEN	fr
710	OPER	,
710	IDEN	fout
710	SPEC	)
710	SPEC	;
711	SPEC	}
712	REWD	else
713	SPEC	{
714	IDEN	fseek
714	SPEC	(
714	IDEN	fr
714	OPER	->
714	IDEN	fin
714	OPER	,
714	OPER	,
714	IDEN	SEEK_CUR
714	SPEC	)
714	SPEC	;
715	IDEN	scan_operator
715	SPEC	(
715	IDEN	fr
715	OPER	,
715	IDEN	fout
715	SPEC	)
715	SPEC	;
716	SPEC	}
717	SPEC	}
718	REWD	else
719	SPEC	{
720	IDEN	fseek
720	SPEC	(
720	IDEN	fr
720	OPER	->
720	IDEN	fin
720	OPER	,
720	OPER	,
720	IDEN	SEEK_CUR
720	SPEC	)
720	SPEC	;
721	IDEN	scan_operator
721	SPEC	(
721	IDEN	fr
721	OPER	,
721	IDEN	fout
721	SPEC	)
721	SPEC	;
722	SPEC	}
724	IDEN	c
724	OPER	=
724	IDEN	fgetc
724	SPEC	(
724	IDEN	fr
724	OPER	->
724	IDEN	fin
724	SPEC	)
724	SPEC	;
725	REWD	if
725	SPEC	(
725	IDEN	c
725	OPER	==
725	CHAR	\n
725	SPEC	)
726	SPEC	{
727	IDEN	fr
727	OPER	->
727	IDEN	line_number
727	OPER	++
727	SPEC	;
728	SPEC	}
729	REWD	else
730	SPEC	{
731	IDEN	fseek
731	SPEC	(
731	IDEN	fr
731	OPER	->
731	IDEN	fin
731	OPER	,
731	OPER	,
731	IDEN	SEEK_CUR
731	SPEC	)
731	SPEC	;
732	SPEC	}
733	SPEC	}
734	SPEC	}
736	REWD	int
737	IDEN	main
737	SPEC	(
737	SPEC	)
738	SPEC	{
739	IDEN	FileReader
739	IDEN	fr
739	SPEC	;
740	IDEN	fr
740	FLOT	.
740	IDEN	fin
740	OPER	=
740	IDEN	fopen
740	SPEC	(
740	IDEN	DEFAULT_INPUT_FILENAME
740	OPER	,
740	STR	r
740	SPEC	)
740	SPEC	;
741	IDEN	fr
741	FLOT	.
741	IDEN	line_number
741	OPER	=
741	INTE	1
741	SPEC	;
742	IDEN	FILE
742	OPER	*
742	IDEN	fout
742	OPER	=
742	IDEN	fopen
742	SPEC	(
742	IDEN	DEFAULT_OUTPUT_FILENAME
742	OPER	,
742	STR	w
742	SPEC	)
742	SPEC	;
744	REWD	if
744	SPEC	(
744	IDEN	fr
744	FLOT	.
744	IDEN	fin
744	OPER	==
744	IDEN	NULL
744	OPER	||
744	IDEN	fout
744	OPER	==
744	IDEN	NULL
744	SPEC	)
745	SPEC	{
746	IDEN	fprintf
746	SPEC	(
746	IDEN	stderr
746	OPER	,
746	STR	Error opening files.\n
746	SPEC	)
746	SPEC	;
747	REWD	return
747	INTE	1
747	SPEC	;
748	SPEC	}
750	IDEN	scan_tokens
750	SPEC	(
750	OPER	&
750	IDEN	fr
750	OPER	,
750	IDEN	fout
750	SPEC	)
750	SPEC	;
752	IDEN	fclose
752	SPEC	(
752	IDEN	fr
752	FLOT	.
752	IDEN	fin
752	SPEC	)
752	SPEC	;
753	IDEN	fclose
753	SPEC	(
753	IDEN	fout
753	SPEC	)
753	SPEC	;
755	IDEN	printf
755	SPEC	(
755	STR	The output is sucessful in %s
755	OPER	,
755	IDEN	DEFAULT_OUTPUT_FILENAME
755	SPEC	)
755	SPEC	;
756	REWD	return
756	INTE	0
756	SPEC	;
757	SPEC	}
